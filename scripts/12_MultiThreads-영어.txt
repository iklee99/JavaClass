Page 1 Let's start
the Multithreads lecture
Page 2
First, let's look at
the terms program, process, and multiprocessing
A program is a piece of software that has not yet been run;
it is stored as a file on disk
First, you have to load it into memory before you can run it
A process is what appears when a program starts running,
and is an active instance managed by the OS
Each process has a separate memory space
with sections for code, data, heap, and stack
This separation helps maintain the state of program execution
in a systematic and safe manner
Multiprocessing refers to executing multiple processes
simultaneously to process tasks in parallel
For example, using multiprocessing on a web server
allows each user request to be processed concurrently,
allowing the server to handle multiple users at once without waiting
Page 3 A thread is a unit of work
executed within a process
There can be multiple threads within a single process
For example, in a video game, various threads
divide up the work and process it, as follows:
First, the Main thread handles the game's main loop,
handling game logic, input, and events
The Rendering thread renders 3D or 2D graphics to the display
The AI thread is responsible for calculating the AI behavior of NPCs,
or Non-Player Characters
Multithreading is a method of performing multiple tasks
simultaneously by creating multiple threads within a single process
Since multiple threads share
memory, tasks can be processed efficiently,
but there may be risks such as synchronization problems
For example, in a text editor,
tasks such as UI, auto-completion, parsing, and file backup
are handled in separate threads, enabling more efficient work
Page 4 A Task is a unit of work
or instruction to be performed
A task is executed by a thread or process
and is used as a unit of scheduling in the OS
Task is a more abstract concept than Process or Thread
Multitasking refers to the OS executing multiple tasks, i.e
processes or threads, simultaneously
The OS allows multiple tasks to run in turn
to efficiently use CPU resources
The types of multitasking are as follows:
Process-based multitasking, or multiprocessing,
is a method of performing multitasking using multiple processes
On the other hand, Thread-based multitasking or multithreading
is a way of performing multitasking
using multiple threads within a single process
Page 5 In a Single Thread Application, there is only one Main Thread,
and the codes are executed sequentially
in the order of code1, code2, and code3
On the other hand, in a multi-threaded application,
the main thread and worker threads perform tasks together
The Main Thread executes code1 and branches
Worker Thread1 to process code11 and code12
Next, the Main Thread executes code2 and branches
Worker Thread2 to process code21
Finally, the Main Thread executes code3
In this way, in a multi-thread application,
the main thread can create a worker thread at a specific point during execution,
allowing multiple tasks to be performed in parallel at the same time
Page 6
This program is an example of using
Java's Toolkit class to generate a beep sound at regular intervals
and then print the message "ding" to the console
The program starts in the main method of the BeepPrintExample class
First, we create a Toolkit object to get the system's default toolbar
Then, in the first for loop,
we call the toolkit.beep() method to emit a beep sound five times
Between each beep sound, a 0.5 second pause
is added via the Thread.sleep(500); method to maintain a constant interval
If an exception occurs, it will be handled in the catch block,
but in this example, it does nothing
After the beep sound ends, we move on to the second for loop,
which prints the string “ding” five times to the console
This loop also uses the Thread.sleep(500); method to leave
a 0.5 second gap between outputs
This program is a Single Thread Application, which means that it has only one Main Thread,
which sequentially performs the tasks of outputting a beep
sound and outputting a “ding” message
Page 7
This program, BeepPrintExample2, is an example that uses a main thread and a worker thread to simultaneously print
a beep sound and a “ding” message
The program starts in the main method, which first creates a worker thread
This worker thread is defined through an anonymous class
that implements the Runnable interface
Inside the worker thread,
a Toolkit object is created and beeps five times,
with Thread.sleep(500); used to create a 0.5
second interval between each beep
If an exception occurs, it is handled in the catch block, but nothing is done here
The worker thread is only executed by calling thread.start();
In the main thread,
the message “ding” is printed five times through System.out.println("ding");
while the worker thread is executing
This also uses Thread.sleep(500); to set the output interval to 0.5 seconds
This program is a Multi Thread Application,
where the Main Thread outputs a “ding” message
while the Worker Thread simultaneously emits a beep sound
In the previous Single Thread Application, only one Main Thread
was used to sequentially output the beep sound and the “ding” message
That is, after the beep sound was finished, the “ding” message was output
On the other hand, in this Multi Thread Application,
the Main Thread and Worker Thread run simultaneously
The Main Thread outputs a “ding” message,
and the Worker Thread makes a beep sound, so that the two tasks are performed in parallel
This will cause the beep sound and “ding” message to appear simultaneously
Page 8 There are two ways to create
a Thread in Java
The first way is to create a Thread class directly
Create a worker class directly using the java.lang.Thread class,
and pass an object that implements the Runnable interface
as a parameter to the constructor
For example, you can pass a Runnable object
like Thread thread = new Thread(Runnable target);
Note that the Runnable interface has only one abstract
method: void run()
The second way is to create a Child Class of Thread
In this method, you inherit the Thread class,
override the run() method, and write the code to be executed in that method
There are two ways to write it, as follows:
The first is the general class method, where you create a class called WorkerThread,
inherit the Thread class, and override the run() method
Then, you can create a thread
object and run it like Thread thread = new WorkerThread()
The second is the anonymous class method, which you can write in the form of new Thread()
{ public void run() { /* code to execute
*/ } }, override the run()
method, and call thread.start(); to execute the thread
Page 9
This slide explains Thread’s Name
By default, Worker threads have a default name of the form Thread-n,
where n is an integer that starts from 0 and automatically increases each time
a Worker thread is created
However, you can set it to a different name
using the setName() method of the Thread class
For example, if you write thread.setName("myThread");,
the thread's name will be set to “myThread”
Setting a name is useful for debugging
This makes it easy to see which thread is performing a particular task
To reference the currently running thread, you can use Thread.currentThread(), and to get the name of this thread,
you can call the getName() method
For example, if you write Thread
thread = Thread.currentThread(); System.out.println(thread.getName());,
the name of the current thread will be printed
Page 10
Here, we explain the naming and execution order of Java
Threads through a class called ThreadNameExample
In this example, when the main method starts,
it takes the name of the Main Thread and prints a message that says main is running
After that, three Thread objects
threadA are created through a for loop and each is executed
threadA is sequentially assigned the default names Thread-0, Thread-1, and Thread-2, and outputs the "running" message
along with each thread name through getName()
After the loop ends, a new Thread named chatThread is created
chatThread uses the
setName("chat-thread"); method to set the name to
"chat-thread" and calls start() to output the message "chat-thread running"
The various output examples on the right
show that the execution order of Threads is not always consistent
In Java, threads are executed in parallel, so the order
in which each thread is executed may be different
This shows that the execution order of threads
is determined by the OS scheduler
Page 11 Java's Threads have various states
depending on the situation
while they are running
First, the NEW state refers to the state immediately after a Thread is created
At this time, the Thread is not yet running
because the start() method has not been called
When the start() method is called, the Thread switches to the RUNNABLE state
The RUNNABLE state indicates that the process is ready to be executed by CPU scheduling,
and this state can then cycle through two sub-states:
The first is the Ready state, in this state
it is waiting to be executed and is ready to use CPU resources
The second is the Running state, which is the state where CPU resources are acquired
and the run() method is actually executed
The OS makes threads
move between Ready and Running states through appropriate scheduling
in order to share the CPU among multiple threads
Even if the OS does not perform CPU scheduling, if a thread in the Running state calls yield(),
it will return from the Running state to the Ready
state and yield the CPU to the next thread to be scheduled
Next, the WAITING state is a state that waits
until the work of another thread is finished
For example, when you call the wait() or join() method,
the Thread enters the WAITING state
and waits indefinitely without using CPU resources
A thread in the WAITING state
can be reactivated by another thread
calling the notify() or interrupt() method,
in which case it returns to the RUNNABLE Ready state
Page 12 TIMED_WAITING state is a state where
a thread waits for a specified amount of time
You enter this state by calling sleep()
or a timed wait() or join() method
After the specified time has elapsed,
the thread is automatically released and returns to the Ready state of RUNNABLE
Next, the TERMINATED state is a state where the thread's execution has been completed
and it is no longer executing
This is the state reached when the run() method ends,
meaning that the Thread's lifetime has ended
Finally, the BLOCKED state is a state in which a thread is waiting
because it is locked by another thread
When a thread tries to enter a synchronized
block or synchronized method
and another thread has locked the block or method,
it enters the BLOCKED state
When another thread releases the lock, i.e., unlocks it,
the BLOCKED Thread acquires the block or method
and returns to the Ready state of RUNNABLE
Page 13 describes a situation
where you wait for another
thread to finish and then process its results
Here, threadA's role is to wait until threadB completes
First, call threadB.start() from threadA to start threadB
Then, by calling the threadB.join() method,
threadA enters the WAITING state
and waits for threadB to terminate
threadB terminates after executing the run() method
At this time, threadA waits until threadB terminates,
so when threadB terminates,
threadA exits the WAITING state and can resume execution,
continuing with subsequent tasks
Page 14
Here is an example of waiting for a Thread to terminate
This is implemented by the SumThread class and the SumThreadJoin class
The SumThread class inherits from Thread
and calculates the sum from 1 to 100 through a variable called sum
The getSum() method is an accessor method that returns the sum value
In the run() method, values from 1 to 100 are added to sum
using a for loop
In the main method of the SumThreadJoin class,
a SumThread object is created
and sumThread is started with sumThread.start()
After this, sumThread.join() is called, so the main thread enters the WAITING state
and waits until sumThread finishes its work
When sumThread completes, the main thread comes out of the waiting state
and calls sumThread.getSum() to print the sum from 1 to 100
The output result of this example is 1~100 sum: 5050,
and you can see that the main thread prints the sum value
after sumThread is completed
Page 15 This shows how
to yield execution of a Thread to another Thread
In the above code, the run() method performs an infinite loop
while the if statement checks the work condition
If work is true, it will print the message "threadA is working",
but if work is false,
it will not perform any work and will continue to repeat the meaningless loop
In this case, the Thread continues to occupy CPU resources
without doing any work
The code below uses the Thread.yield() method to cause the current
Thread to stop executing
and yield CPU resources to another Thread if work is false
This will free up CPU resources for other threads,
reducing unnecessary waste of CPU resources
In summary, by calling Thread.yield() when work is false,
you can reduce meaningless
repetition and yield CPU resources to other threads
Page 16
This code is an example of creating and executing two threads
called WorkThread in the YieldExample class
The WorkThread class is identified by its name,
and internally uses a flag called work
to determine whether to call yield() in certain situations
If we look at the execution flow of the main thread
indicated by the main method, first, two WorkThread objects
called workThreadA and workThreadB are created
and the start() method is called to execute them
Each thread starts performing its own work in parallel
We pause the main thread for 5 seconds using Thread.sleep(5000);
After 5 seconds, set the work flag of workThreadA to false,
causing workThreadA to call yield()
This causes workThreadA to no longer monopolize CPU resources
and yield the CPU to another thread, namely workThreadB
As a result, workThreadB uses more CPU
and runs relatively more frequently
After that, we pause
the main thread again for 10 seconds using Thread.sleep(10000);
After 10 seconds, we set the work flag of workThreadA to true
so that workThreadA will no longer call yield()
and will run at a similar frequency as workThreadB
The purpose of this program is to demonstrate how to coordinate the execution
frequency of two threads by controlling one
thread to yield the CPU to another thread using yield()
After 5 seconds, workThreadB will be executed more times, and after 10 seconds,
both threads will be executed with a similar number of times
Page 17
This code contains the definition of the WorkThread class
used in the YieldExample class in the previous slide
The WorkThread class inherits from Thread and has a flag
called work that controls whether to yield() under certain conditions
to yield CPU resources to other threads
The main components of the WorkThread class are: First,
the work flag is initialized to true;
and it determines whether the Thread will continue to perform its work or yield
the CPU resource through yield()
The constructor, WorkThread(String name),
calls setName(name); to set the name of the Thread
This allows us to identify each Thread
The run() method defines the task of the Thread
Inside the infinite while loop,
two actions are performed depending on the value of the work flag:
When work is true, call the getName() method to get the name of the Thread,
and print the "Work Processing" message through System.out.println(getName()
+ ": Work Processing");
That is, the state in which the Thread performs actual work
When work is false,
call Thread.yield(); to yield CPU resources to another thread
At this time, the Thread enters the WAITING state,
allowing other Threads to use the CPU resource
If you run this class with the previous YieldExample code, initially
both workThreadA and workThreadB have work true,
so the two Threads take turns printing out the "Working" message
After 5 seconds, workThreadA's work is set to false,
so workThreadA calls yield() to yield the CPU resource
This causes workThreadB to run relatively more frequently,
resulting in more output of "workThreadB: Processing work"
After 10 seconds, workThreadA's work is set to true again,
yield() is not called, and workThreadA and workThreadB output
"work processing" at similar frequencies
The purpose of this code is to show how to control the execution
frequency between threads by controlling a specific thread to yield CPU resources
using the yield() method
Page 18 This is an example
that demonstrates the need for Thread Synchronization
It explains the problem that occurs when User1Thread and User2Thread
share a single
object, Calculator, and perform tasks
First, User1Thread sets the memory value of the Calculator object to 100
After that there is a 2 second pause
When you print the memory value of the calculator after pausing,
you will notice that it has changed to 50, not the expected 100
This is because User2Thread changed the memory value
Meanwhile, User2Thread sets the memory value of the same Calculator
object as User1Thread to 50
After that there is a 2 second pause
Since both Threads share the same Calculator
object and set the memory value,
if one Thread changes the memory value,
it will affect the results of the other Thread's work
In such cases, Thread Synchronization is required
Thread Synchronization can prevent such problems
by allowing two threads to safely
modify and read memory values
Ultimately, this example shows that Thread
Synchronization is important to prevent conflicts that occur when threads access
a shared resource simultaneously
This will be a program that translates the explanation in the previous slide
into code on page 19
This program is an example that demonstrates the need for Thread Synchronization
Here, two threads, User1Thread1 and User2Thread1, share
a single Calculator1 object and perform tasks
The Calculator1 class has methods for setting
and printing memory values
In the main method, a Calculator1 object, a calculator, is created
This object will be shared and used by two Threads,
user1Thread and user2Thread
Create a user1Thread and call the setCalculator() method, passing
a calculator object
Then call user1Thread.start() to run it
Similarly, create a user2Thread
and call the setCalculator() method, passing
a calculator object
Then call user2Thread.start() to run it
Page 20 User1Thread1 class is defined as a child of Thread
In the constructor, we change the name
to “User1Thread” using setName
It has a setCalculator method,
which is a mutator for setting the value of the private instance
variable calculator, and in the overriding run,
the memory of the calculator is set to 100
Page 21 The User2Thread1 class is also defined almost similarly
to the User1Thread1 class above
However, in this case, the calculator's memory in the overriding run
is set to 50
Page 22 The Calculator1 class
has an instance variable memory,
which is an integer
In the setMemory(int memory) method,
it first sleeps for about 2 seconds,
then gets the name of the current thread and prints it,
and then prints the memory value of the calculator
Since this program does not use Thread Synchronization,
User1Thread1 and User2Thread1 will interfere with each other
For example, User1Thread1 can set memory to 100 and wait 2 seconds
while User2Thread1 changes memory to 50
As a result, when User1Thread1 prints
the memory value, 50 may be printed instead of 100, contrary to expectations
Similarly, User2Thread1 will also be affected
To solve this problem, you need to add the synchronized keyword
to the setMemory() method to prevent two threads
from accessing the setMemory() method at the same time
Using synchronized ensures that the memory
value is kept safe because
while one thread is executing the setMemory() method,
other threads are kept waiting in a waiting state
This example highlights the importance of Thread
Synchronization for shared resources
Page 23 Let's talk about synchronized methods and blocks
Using the synchronized keyword,
you can lock a method or block
so that only one thread can execute it at a time
This lock is held until the current Thread finishes
executing its synchronized method or block
Once execution is complete, the lock is released, allowing another thread to enter this area
For example, if you add the synchronized keyword to a method,
such as public synchronized void method(),
this method can only be executed by one thread at a time
That is, while this method is being executed,
it is locked so that other threads cannot access this method
Alternatively, you can lock only a specific area of code
rather than the entire method
At this time, you can use synchronized(this)
to ensure that a specific block can only be executed by one thread at a time
For example, you can wrap a specific section inside
a public void method() with synchronized(this)
to limit execution of that section to only one thread at a time
The rest of the parts can be executed by multiple threads simultaneously
That is, if you attach synchronized to a method,
the entire method is locked, and if you use a synchronized block, only part of the method's code is locked
This allows you to optimize performance by locking only the necessary parts
Page 24 Here we will explain
the synchronization function of the Calculator2 class
This program is an example of using Java's synchronized
methods and synchronized blocks to solve problems that can occur when multiple threads access
a field called `memory` simultaneously
I will skip the explanation
since it is almost the same as the previous SynchronizedExample1 example
where the synchronized function was not implemented,
and start with the Calculator2 class where the synchronized function is implemented
If you look at the structure of the `Calculator2` class,
you will see that it has an integer field called `memory`
The getMemory() method is defined as an accessor to read
the memory value
There are two methods available to change the memory value: `setMemory1`,
which is a synchronized method, and `setMemory2`,
which uses a synchronized block
Both methods restrict access to the `memory` field
to only one thread at a time
First, let's look at the `setMemory1` method
This method is synchronized using the `synchronized` keyword
That is, while one thread is executing the `setMemory1` method,
other threads cannot access this method
When this method is executed, the currently executing thread locks the `Calculator2` object,
blocking access by other threads
Inside the method, call `Thread.sleep(2000);` to wait for 2 seconds,
then print the current thread name and memory value
Next, on page 25,
we'll look at the `setMemory2` method
This method is implemented in a way
that synchronizes only a specific block of code, not the entire method
The `setMemory2` method sets a synchronized block
via the `synchronized(this)` statement,
and accesses the `memory` field only within this block
Therefore, only one thread at a time
can execute this block for the `Calculator2` object
After that, it waits for 2 seconds with `Thread.sleep(2000);`
and then prints the thread name and memory value
The output of this program is 100 for User1Thread and 50 for User2Thread,
which reflects the original intention well
This output shows that two threads called the `setMemory1`
and `setMemory2` methods respectively,
setting `memory` to different values: 100 and 50
Each thread waits for 2 seconds
and then outputs the final memory value it set
Using `synchronized` like this
prevents multiple threads from accessing the `memory` field
and changing its value at the same time
Page 26 We will explain how
to control threads
using the wait() and notify() methods
First, the Waiting pool is where threads in the BLOCKED state
wait for a synchronized method or synchronized block
That is, threads waiting for a specific task
will wait in this waiting pool in a wait state
When a thread completes its work in a synchronized method
or synchronized block,
it can wake up
other threads by calling the notify() or notifyAll() method
notify() makes one thread in the waiting pool
ready and takes it out of the queue,
while notifyAll() makes all threads in the waiting pool ready
Through this process, other threads are prepared to run again,
and the current thread can wait by calling the wait()
method and entering the BLOCKED state
The following are restrictions on the wait() and notify() methods
These two methods can only be called within a synchronized
method or synchronized block
Otherwise, an exception called IllegalMonitorStateException is thrown
This is a necessary constraint because control
over shared resources can only be gained within a synchronized block
To summarize the effect through this mechanism,
wait() and notify() allow multiple threads to execute synchronized methods
or synchronized blocks alternately
That is, after one thread has used up a resource,
you can control it so that another thread can use the resource
Page 27
Here, we will explain how to communicate between threads
using the `wait()` and `notify()` methods through
the `WaitNotifyExample` program
This program is structured so that two threads take turns performing
tasks `methodA` and `methodB`
Through this, we will learn thread
control and synchronization methods in a multithreading environment in Java
First, let's look at the `main` method of the `WaitNotifyExample` class
This method creates a shared object called `WorkObject`
and creates two threads, `ThreadA` and `ThreadB`
These two threads are designed to call `methodA` and `methodB`
of `WorkObject` alternately
Finally, we run the two threads
via `threadA.start()` and `threadB.start()`
Page 28 The `ThreadA` class
inherits the `Thread` class
and has `WorkObject` as an instance variable
In the constructor, the thread name is set to "ThreadA"
and `WorkObject` is received and stored
In the `run()` method,
`workObject.methodA()` is called 10 times through a loop
This thread executes the `methodA` method and alternates with other threads
using the `notify()` and `wait()` methods
Page 29 The `ThreadB` class inherits the `Thread` class,
similar to `ThreadA`, and has `WorkObject` as an instance variable
In the constructor, the thread name
is set to "ThreadB", and `WorkObject`
is received and stored
In the `run()` method,
`workObject.methodB()` is called ten times through a loop
This thread executes `methodB`,
which also executes alternately with `ThreadA`
through the `notify()` and `wait()` methods
Page 30 The `WorkObject` class
has two methods,
`methodA` and `methodB`,
both of which are declared as `synchronized`
This class is a shared object between `ThreadA` and `ThreadB`,
and both threads call this method alternately
Each method prints the name of the currently running thread, wakes
up the other thread with `notify()`,
and then puts itself in the `BLOCKED` state with `wait()`
This allows the two threads to take turns performing tasks
Let me explain the behavior of using the `wait()` and `notify()` methods inside
the `methodA` and `methodB` methods
`methodA` calls `notify()` to wake up
`ThreadB`, and `ThreadA` calls `wait()` to enter a waiting state
`methodB` wakes up `ThreadA` by calling `notify()`, and `ThreadB` calls
`wait()` to enter a waiting state
In this way, through `wait()` and `notify()`, the two threads alternately
execute `methodA` and `methodB`
This approach is useful in multithreaded environments
where shared resources must be synchronized and used alternately
In the program output, `ThreadA` and `ThreadB` alternately
execute `methodA` and `methodB`
This result is because the two threads are controlled
to execute sequentially
through the `wait()` and `notify()` methods
Page 31 Here we will discuss Safe Termination of a thread
Safe termination of a thread
means that the thread properly cleans up all resources
and finishes its work without any unexpected state
or side effects
Safe termination is an important concept in multithreaded environments,
as it can increase the stability and predictability of the system
Let's take a look at the tasks performed during safe termination
First is Resource Release. It is important to release all resources
before the thread terminates
This includes resources used by the thread, such as files, network sockets, etc
Failure to properly free resources
can result in wasted resources or negative impacts to the system
The second is State Cleanup
State Cleanup means cleaning up the state of a thread
before it finishes its work
In situations where a thread may be interrupted midway,
its state must be cleaned up so that other threads or processes can continue their work without confusion
Finally, Consistent Behavior. It is important that
threads have a predictable termination process
while maintaining consistent behavior
This process ensures the stability of the system
and allows users to anticipate the termination of threads
In conclusion, safe termination of threads
is an important factor in managing resources efficiently and increasing the predictability of the system
This cleanup is especially essential in multithreaded environments
Page 32 explains ways to safely terminate
a thread
The first way is to use Volatile variables
A volatile variable is a variable that is shared between threads,
and its value is guaranteed to be immediately reflected in all threads whenever it is changed
This allows you to set thread termination conditions
using the flag variable
For example, you can control all threads to terminate
by setting the volatile flag value to false under certain conditions
The second way is to use the Interrupt() method
The interrupt() method releases a specific thread from the WAIT or BLOCKED state,
allowing the thread to stop its work
For example, if you call interrupt() while a thread is waiting,
an InterruptedException will be thrown, allowing the thread to stop its work
The third way is to use an ExecutorService,
which is a useful tool for managing thread pools
This allows you to efficiently distribute multiple tasks across threads
and control their completion
You can submit work to a thread pool
and safely terminate the thread
using the shutdown() or shutdownNow() method
shutdown() waits for all submitted tasks to complete before exiting,
while shutdownNow() requests that any currently running tasks be stopped immediately
There are three ways to safely terminate a thread:
Each method can be useful in different situations,
and can help increase stability and predictability in multithreaded environments
Page 33
This slide shows an example of safely terminating a thread
using a volatile variable
This example uses the SafeStopVolatile class and the VolatileThread class
to illustrate how the volatile keyword ensures safe termination of a thread
First is the VolatileThread class
This class defines a new thread by inheriting the Thread class
It declares a volatile variable called running and sets its initial value to true
The volatile keyword ensures that when the value of this variable changes,
it is immediately reflected in all threads,
so that threads can check the latest state of the variable whenever its value changes
The run() method repeatedly performs a task while running is true
The while (running) loop automatically terminates when running changes to false
The actual work is done inside this loop,
and the parts that do the work are commented out
The stopThread() method sets running to false,
causing the while loop in the run() method to terminate
By calling this method, the thread can be safely terminated
Finally, here is the SafeStopVolatile class. In the main() method,
we create a VolatileThread instance
and call the start() method to start the thread
After the thread is executed, wait for 1 second
using Thread.sleep(1000);, and then call stopThread() to stop the thread
This causes the running variable to be set to false,
and the VolatileThread's run() method exits the loop and terminates
This example shows how to safely terminate a thread
using volatile variables
The volatile keyword allows a thread to always
see the latest state of a variable,
allowing the thread to terminate predictably via the running flag
Page 34
Here we will demonstrate an example of safely terminating a thread
using the interrupt() method
First, the InterruptibleThread class is a thread class
defined by inheriting the Thread class
It uses a while loop in the run() method to perform repetitive tasks
This loop continues until the current thread is no longer interrupted
We call Thread.sleep(100); to pause the thread for 100 milliseconds
Setting a short wait time
like this will allow us to stop immediately when interrupt() occurs
The run() method is wrapped in a try-catch block
If interrupt() is called while the sleep() method is executing,
an InterruptedException is thrown
If this exception occurs, you can safely terminate the thread
by printing the message
“Thread interrupted” in the catch block
In the main() method of the SafeStopInterrupt class,
create an InterruptibleThread instance
and call the start() method to start the thread
After the thread starts, wait for 1 second
using Thread.sleep(1000); and then call the interrupt() method to interrupt the thread
This causes an InterruptedException to be thrown in
InterruptibleThread's run() method, and the thread terminates
with the message "Thread interrupted"
The execution result of this code is the message Thread interrupted
This message indicates that a thread was stopped normally
due to an interrupt() call
This example will help you understand how to safely interrupt a thread
using the interrupt() method
The interrupt() method can be used to request interruption when a thread is in sleep() or wait() state,
making it useful in multithreaded environments
Page 35 This section
explains how to safely terminate a thread
using ExecutorService
This example uses the ExecutorService, Executors, and TimeUnit classes
ExecutorService manages a thread pool,
which allows efficient control over the execution
and termination of threads
Call Executors.newFixedThreadPool(2) to create a thread pool with two threads
This thread pool can handle two tasks concurrently
In the first executor.submit(), the first thread checks
the interrupted status through the isInterrupted() method
in an infinite loop and prints the "running" message
The second executor.submit() also checks for a pause
in an infinite loop and prints the message "running"
These two tasks will continue to run as long as the thread is not interrupted
After the main thread waits for 10 milliseconds via Thread.sleep(10);,
we call executor.shutdown() to request the ExecutorService to shut down
shutdown() completes any tasks already submitted, but stops accepting new ones
Afterwards, we use the awaitTermination(10, TimeUnit.MILLISECONDS)
method to wait for the thread to terminate for up to 10 milliseconds
If all tasks do not finish within the specified time,
shutdownNow() is called to force an interrupt
The output shows that each thread continuously prints the "running" message,
and then is forcibly stopped after the shutdownNow() call
The output will be messages like pool-1-thread-1
running, pool-1-thread-2 running
This example will help you understand how to safely terminate threads
within a thread pool using ExecutorService
You can sequentially terminate or forcibly stop
threads through shutdown() and shutdownNow(),
allowing you to efficiently manage resources in a multi-threaded environment