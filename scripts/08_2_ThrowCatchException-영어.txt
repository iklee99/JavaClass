I will lecture on Throwing and Catching Exceptions
Page 2 The basic code
for exception handling is try-catch-finally block
Inside the try block, put code that has the possibility of throwing an exception, that is, code
that has the possibility of causing an exception
In the catch block, you put the code to handle the exception
if there is an exception that has occurred (thrown)
Note that the catch block can receive the exception
that occurred as a parameter and use it
The finally block contains a part
that must always be executed
regardless of whether an exception occurred
The finally block is not a required part, so it is often omitted
The execution order of the
try-catch-finally block
when no exception occurs on page 3 is
as shown in the figure on the left
It executes from the beginning
to the end of the try block, skips
the catch block, executes all finally blocks,
and then continues execution to the next block
On the other hand, when an exception occurs,
execution stops at the point where the exception occurs in the try
block, moves to the catch
block, executes the catch block from beginning to end,
executes all finally blocks,
and then continues execution to the next block
Please note that in particular, in cases where an exception occurs,
the instructions after the point where the exception occurred
within the try
block are not executed
and instead jump to the catch block
Page 4
Let's look at the flow of the try catch block more specifically
This is the case when no exception occurs
After printing 1 and 2 in the main method,
3 and 4 are printed in the try block,
and since no exception occurred,
the catch block is not executed
The catch block is skipped, 6 is printed,
and the program terminates
Page 5
This time, let's look at the case
where an exception occurs
After printing 1 and 2, we enter the try block
We print 3 and try 0/0,
but dividing by 0 causes an ArithmeticException
The exception that occurs
is caught in the catch block
and enters the catch block
After printing 5 and exiting the catch
block, 6 is printed and the program ends
Page 6 In the TryCatchDemo example program,
we will look at the code that handles exceptions
that may occur
during the process of converting elements
of a String array
one by one to int type
using a try-catch-finally block
In our program, the elements of the String array are “123”,
“45”, and “abc”, so if we try to convert the third element,
“abc”, to an integer,
a runtime exception, NumberFormatException, will occur
Meanwhile, the index of the for loop repeats from i = 0 to 3,
but since the size of the str
array is 3 and the index is from 0 to 2,
an ArrayIndexOutOfBoundsException will occur when i = 3
In each catch block that catches each exception, a message is printed
indicating which exception occurred
And the finally block will be executed at the end of the body
every time the for loop is repeated,
regardless of whether an exception occurs
Note that you can use
catch blocks
multiple times to handle
different exceptions
Page 7
All exceptions are descendants of java.lang.Exception
Therefore, it is recommended that the order of catch blocks
be such that
the lowest descendant exception class is caught first
If you catch the capitalized Exception
class first
as shown in the figure, all descendant exceptions
will also be caught in this first catch block
due to polymorphism
In this case,
the two catch blocks below
do nothing and do not need to exist
Therefore, to prevent such cases,
it is recommended to catch upper exceptions in the later catch
block as much as possible
Page 8
If we consider two ways to handle exceptions
within a method,
the first is a handling method that uses a try-catch block
as we have seen so far,
and the second is a method that throws an exception
so that the previous method that called the current method
handles the exception
To throw an exception like the second method,
you need to use the ‘throws’ keyword
in the header of the current method
to indicate that this method will not handle any exceptions
but will throw them
If you do this, when another method calls this method later,
the called method can take responsibility
and handle the thrown method with try-catch,
or if it doesn't like that,
it can throw it again
and pass the responsibility for handling to the method
that called it
Page 9
For example, let's look at the ThrowingExceptionDemo program
It assigns a String literal called "java.lang.String2" to a String name
The intention of this program is to execute Class.forName(name),
which will return the class information as an object of uppercase Class
when a class with the name of this String named name exists
However, we already know that there is no class
called String2 in java.lang
Anyway, instead of calling the forName method directly,
I tried to call forName
in a method called findClass with findClass(name)
When I went to the findClass method,
I saw that Class.forName(name) was called here to return
an uppercase Class object,
which was then returned to main
However, as we have already studied,
there is a risk of ClassNotFoundException
occurring when calling forName,
and since this is a General Exception,
if you do not code handling code in case the forName call causes an exception,
a compile error will occur
Here, the findClass method has coded the throws
phrase “throws ClassNotFoundException”
after the method header to pass the responsibility for handling it
back to the main method that called it
For this reason, ClassNotFoundException must be caught
and handled again in main,
and that is why a try-catch block is used
However, in cases where you need to add a throws phrase to the method header,
the exception being thrown is a General exception
That is, the enforcement is imposed only in the case of a compiler checked exception
In the case of a runtime exception, that is, a compiler
unchecked exception, the throws clause is not mandatory,
and it does not cause a compile error whether you use it or not
However, it is better to use a throws clause
to inform other methods
that this method does not handle exceptions
but simply throws them
The output of this program will ultimately be the message
printed in the catch block
Page 10 This time,
let's learn about the throw command
One thing to note is that the throw command and the throws phrase
we looked at in the previous slide are different things
The throw command is a command
that the program intentionally causes an exception to occur,
and it must be handled with a try-catch block
just like an exception caused by an error,
or it must be thrown to the method that called it
and responsibility passed on
In the ExceptionEx03 class program,
a java.lang.Exception class object
e was created, and the message “MyException” was given,
and then the exception e was thrown
An exception thrown in this way
requires the same handling as an exception
caused by an error within the try block
So, in the catch block, we received this exception,
printed an error message,
and called printStackTrace() to print
the method stack
Although the exception thrown in
this program was thrown for no reason,
if we make good use of this throw exception,
we can control various
useful execution sequences
Page 11 Let's look at an example
of how the execution
order of a program changes
when using throw and throws
This example program is a class called ExceptionEx04,
and it contains three classes: main, method1, and method2
Method1 is called from the try block of main, and method2
is called from the try block of method1
method2 is set to throw a NullPointerException,
and it creates and throws a NullPointerException without any processing
This exception must be caught and handled in method1,
which calls method2
After catching the NullPointerException,
print 2
And then rethrow the NullPointerException
When an exception that has been caught is rethrown,
it is called ‘rethrow’
Since method1 has the phrase ‘throws Exception’,
this rethrown exception will be handled by main,
which called method1
However, since there is a finally block below the catch
block of method1,
the finally block is executed
before returning to main,
so 4 is printed
One thing to note
is that the rethrown exception
e is not caught in the second catch
block of method1, catch (Exception e)
This is because the try-catch-finally
block is a group, and among the catch blocks in the middle,
only one catch block is executed
before proceeding to the finally block
Eventually, the rethrown exception
returns to main,
and the catch block is executed, printing 7
The final output is 2 4 7
Page 12 Java's exceptions
have a useful feature called user
defined exceptions or programmer defined exceptions
This is a feature that allows programmers to create
and use their own custom exception classes
If there is no appropriate exception class
you are looking for among the libraries already provided in Java,
you can create a new exception
class by inheriting the standard exception class
If you extend the uppercase Exception class,
you can create a new compiler
checked exception, and if you extend the RuntimeException class,
you can create a new compiler unchecked exception
On the other hand, by using the constructor of a user defined exception
class, you can program the exception class
to have an appropriate message
Page 13
Now let's look at an example
program of user defined exception
For input using Scanner, we imported java.util.Scanner class
We inherited Exception class
and defined InvalidInputException class
as user defined exception
We received String message in constructor
and called super(message) to save message
that can be retrieved when exception occurs
We defined ExceptionBasedInputLoop as main class
In the main method, we first create a Scanner object for input,
initialize the number that will receive the integer input to 0,
initialize the validInput boolean variable
that will indicate whether a valid input
has been received to false, and initialize the String
variable input for input to null
Page 14
This program repeats scanner input
until a positive odd integer is successfully entered,
and uses exception
handling to test for the condition that it is a positive odd integer
This method is called an exception based input loop
The while loop will continue to loop as long as validInput is false
Inside the try block, the prompt “Please enter a positive odd integer:
“ is printed and an entire line is input
as a String using scanner.nextLine()
This input String is converted to a number of int type
using Integer.parseInt(input), a wrapper class
If the input String in this conversion
is something that cannot be converted to an int,
such as “abcd” or “123.45”,
the program will throw a NumberFormatException and execution of the try block
will stop at this point
and jump to the catch block that catches the NumberFormatException
If the input is successfully converted to an integer
and the number is an integer less than or equal to 0,
it throws an InvalidInputException,
a user-defined exception class
with the message “Negative Number”
After throwing, it does not proceed any further
and executes the catch (InvalidInputException) block
If number is a negative integer, or not 0,
then number is a positive integer, and we want to input an odd number among them,
so we test if number is even
If number has a remainder of 0 when divided by 2, then it is even
If it is an even number,
an InvalidInputException object is created and thrown with the message “Not odd integer”
The program then proceeds to the catch(InvalidInputException
e) block
If number is neither a negative integer, nor zero,
nor a positive even integer, then number will be the positive odd integer we want
At this time, validInput is assigned to true
and the while loop can be exited
Page 15
Looking at the input example, when a9832 is initially entered,
a NumberFormatException occurs and the message “Invalid input:
Not a valid integer” is displayed
The next input received is -253 this time,
and the message “Negative integer” is displayed
The next input is 2982,
and the message “Not odd integer” is displayed
If a positive odd integer such as 980751 is input, the while
loop ends and the program terminates