Page 25

Stack에 대해서 강의하겠습니다
Stack은 계속해서 얘기하지만
Collection에서  List interface 밑에 속하는 class 구요
Stack은 Vector, 그러니까 기본적으로 array를 바탕으로 해서
implement되는 그런 것이 되겠습니다

Page 26

Stack은 많이 우리가 들어봤지만
한쪽으로만 push하고 한쪽에서만 pop을 하는
그런 data structure가 되겠습니다
그래서 push를 하게 되면 항상 Stack의 top에 올라가 있게 되고요
top of the Stack이죠
pop을 할 때는 순서대로 제일 위에 있는 것
top부터 pop을 하게 됩니다
그렇기 때문에 이 Stack은 항상
Last In, First Out, 그래서 LIFO 라고 부르죠
그래서 제일 나중에 도착한 것이
가장 처음으로 pop된다 라는 얘기가 되겠습니다

Page 27

그래서 Stack을 push하는 그 그림을 예를 보면
empty일 때 push 20을 하고 그럼 top이 20이 됐고
그 다음에 13을 하게 되면 20위에 13이 올라가고
네 이런 식으로 22에 13 89 push가 됐고
90 11 45 18 이런 식으로 push가 되겠습니다
항상 여기가 이제 제일 위에 있는 걸 top이라고 얘기하고요

Page 28

pop operation 어떻게 돼요?
항상 top에서부터 빠져나가죠
그래서 pop 18 하게 되면 18이 먼저 나가고
나가게 되면 top이 이제 45가 됐고
pop하게 되면 45가 나가게 되고 그 다음 11이 나가게 돼서
이런 식으로 제일 위에부터 나가게 그렇게 되겠습니다

Page 29

Stack class는 이제 기본적으로
Vector 즉 array를 기본으로 해서 implement가 되지만
다른 그런 method를 가지고 있어요
그래서 empty() 는 Stack이 empty면은 true를 return하는 거고
push() 하고 pop() 이 다 있습니다
push() 는 Stack의 top에다가 push하는 거구요
pop() 은 뭐냐면 일단 기본적으로 remove를 합니다
top에 있는 거를 remove를 하면서
그 remove 된 top에 있는 것을 return을 하게 되죠
그 다음에 peek() 은 top에 있는 것을 return을 하긴 하지만
remove 하진 않습니다 그대로 남겨두는 거죠
그냥 살펴만 보는 게 peek이 되겠고요
search(Object o) 는 뭐냐면 어떤 주어진 Object o가 Stack 안에 있는지 보고
만약에 있으면 index position을 return하게 되고
없으면 -1을 return하게 되는 거죠

Page 30

그 다음에 example을 좀 보도록 하겠습니다
Stack을 지금 Integer를 type parameter로 해서 만들었죠
그래서 Is the Stack empty? 하고 물어보면
처음에는 아무것도 push를 안 했으니까 true가 나오겠죠
그 다음에 Stack에다가 push 78, 113 해서
그 다음에 println은 Elements in Stack은 78, 113이 되겠고
그 다음에 empty냐고 물어보고
Stack empty를 또 print하면 false가 되겠죠 이번에는

Page 31

자 그 다음에 두 번째 example에서는
Integer를 type parameter로 해서 만들었죠
그래서 20, 13, 89, 90 처음엔 Stack이 비어 있었고 [ ]
그 다음에 두 번째 print 할 때는
[20, 13, 89, 90] 이렇게 print가 되구요
딱 보니까 Stack이 array를 기본으로 해서 implement 된다고 했는데
20이 지금 제일 첫 번째 element로 들어가 있죠
그래서 항상 Stack에는 push 할 때는 이런 식으로 print가 되게 된다 라는 거죠
top이 제일 먼저 앞에 나와 있고
자 그 다음에 Stack의 pop을 하게 되면 이 return하는 것이
현재 top에 있는 것을 return하게 되죠
그래서 90이 return되고요
여기서는 20, 13, 89, 90 이니까 top에 지금 90이 올라가 있죠
90은 맨 끝에 있는 게 맞겠죠
여러분들 array에서 어느 쪽에 add를 하고
어느 쪽에서 remove를 하는 게 더 편했습니까
array에선 항상 맨 끝에다가 추가를 하고 삭제를 하는 것이 훨씬 효율적이죠
그렇기 때문에 Stack top은 항상 맨 끝이 돼야 되겠죠 당연히
그래서 90이 pop 되고 나면 0, 20, 13, 89만 남았을 거고 여기서는
그 다음에 두 번째 pop을 하면 또 return을 89를 삭제하면서 개를 return하게 되죠
그래서 89가 return되니까 맨 나중에 Stack은 20, 14만 남게 됩니다
이런 식으로 안에서 어떤 일이 벌어지고 있는지를 좀 생각해 가면서
그렇게 coding을 하면 좋겠습니다

Page 32

자 그 다음에 Queue interface 인데요
Queue는 Collection 아래에 있기도 한데
이 Queue는 또 LinkedList의 또 parent이기도 해요
이 Queue interface가 그 다음에 뒤에 나올
PriorityQueue를 또 child로 가지고 있고요

Page 33

자 그래서 interface Queue는
Stack이랑은 다르게 First In First Out을 제공합니다
즉 제일 먼저 들어온 것이 제일 먼저 빠져나간다
그러니까 add 될 때는 이 처음에 들어온 거 뒤에
add가 이렇게 되는데 얘가 빠져나갈 때는
제일 처음부터 순서대로 나가게 되는 거죠
fair 하죠 그 다음에 data를 끝 쪽에
항상 그 뒤쪽으로 add하게 되고요 줄을 서 있기 때문에
그래서 그걸 offer라고 하고요 offer(data) 라는 method를 사용하고
그 다음에 remove data  할 때는 poll이라고 합니다
얘를 remove하면서 return하게 되고요
그 다음에 observe만 하는 거
즉 뭐가 들어있는지 보고 remove하지 않는 건 peek이죠
그래서 이 poll, peek 그 다음에 offer
이 세 개가 중요한 그런 operation이 되겠습니다
LinkedList 가 많은 경우에 Queue를 Implement하는 데
사용된다는 얘기가 되겠습니다
그래서 사실 ArrayList를 쓸지 LinkedList 를 쓸지
Queue를 Implement하는 데 있어서 좀 고민이 있을 수 있어요
왜냐하면 이 Queue는 들어오는 건 한쪽 끝에서 들어오고
나가는 건 다 반대쪽 끝에서 나가기 때문에
ArrayList와 LinkedList가 둘 다 장단점을 상반되게 가지고 있어요
예를 들면 tail에다가 add 할 때 ArrayList는 금방 할 수 있죠
근데 LinkedList는 일단 tail로 따라가야 되니까 n-1번을 봐야 되고
근데 이거는 이제 사실 tail에 그 포인터를 하나 가지고 있으면 해결되는 거라서
LinkedList는 이제 그런 식으로 해결을 하고 있다 이렇게 보면 될 거고요
그 다음에 element를 head에서 삭제할 때 poll 할 경우에는
ArrayList는 필연적으로 n-1번 즉 이 data를 다 옮겨야 되죠 array이기 때문에
그런데 LinkedList는 금방 해결을 할 수 있습니다
그리고 아까 tail에 그 포인터 하나를 가지고 있으면
그거 가지고 쉽게 해결된다는 얘기를 했는데
그렇기 때문에 LinkedList가 쓰이는 경우가 많습니다

Page 34

Queue interface의 method로 중요한 것은 아까 세 개를 말했죠
offer 요거는 그 뒤쪽에 Queue에다가 하나씩 add하는 거다 라고 했고
그 다음 peek은 제일 앞에 거를 return하지만
remove하지는 않는다 라고 했고
poll은 어때요 제일 앞에 거를 return하면서 걔를
Queue에서 remove해 버리죠
그 중요한 것들을 좀 알고 있어야 되구요

Page 35

그래서 LinkedList로 구현된 Queue에 대한 예제인데요
여기서 보면은 Queue<Integer>, LinkedList<Integer> 이렇게 돼 있죠?
신기한 게 여기 Queue 이쪽은 앞에는 Queue인데
뒤에는 LinkedList로 돼 있어요
그건 왜 그러냐면 Queue가 interface이기 때문에 그래요
Queue는 자기가 이렇게 실제로 instancing을 하지 못하죠
interface이기 때문에. 그래서 Queue를 instancing 할 때는
이렇게 실제 자기를 implement하고 있는 하나의 concrete class로
instancing을 해야 됩니다
이 경우에는 LinkedList, 아까 얘기한 대로 LinkedList를 사용해서
Integer type parameter를 사용해서 Queue를 instancing을 한 거고요
그 다음에 queue.offer(5), 그 다음에 1,  2, 3, 4,
offer를 하면 이건 push 하는 거죠
push라고 하지는 않죠, Queue에서는
Queue가 있을 때 처음부터 이렇게 하나 뒤쪽으로
계속 매달려서 5, 1, 2, 3, 4가 되니까
print를 하게 되면 [5, 1, 2, 3, 4] 이렇게 print가 되죠
그 다음에 Queue에서 poll을 세번 했어요 poll을 세번 하면서
여기에서 poll() 된 거를 Queue.poll() 된 거를
그 return value를 계속 여기서 print를 했거든요
그리고 전체 Queue를 print하고 뒤쪽에 그렇게 되면은
poll 한 개 처음에 5가 poll이 되죠?
빠져나가고 그 다음에 나머지 큐는 [1, 2, 3, 4] 남게 되고요
두 번째 poll을 하면 그 다음 제일 앞에 있는 거 1이 빠져나가고 [2, 3, 4]
그 다음에는 맨 앞에 있는 건 2가 빠져나가고 그 다음에 [3, 4] 이런 식으로 그쵸?
그 다음에 peek을 할 때는 어때요?
peek을 할 때는 제일 앞에 있는 게 return이 되긴 하지만 remove 되진 않죠
그래서 [3, 4] 이런 식으로 되게 됩니다
이제 poll하고 peek의 차이를 아시겠죠

Page 36

그 다음에 priorityQueue 인데요 priorityQueue는
Queue에서 Queue를 implement 하는 그런 class입니다
Concrete class이고 굉장히 특이한 특징을 가지고 있습니다

Page 37

그래서 PriorityQueue 중에 기본은 뭐냐면 minimum PriorityQueue입니다
그래서 minimum priority가 default인데요
이거는 data를 막 계속 넣을 때 얘가 무슨 짓을 하냐면
지금까지 들어온 것 중에 minimum이 항상 head에 있도록 합니다
제일 앞에 있도록
그런데 그 특이한 것은 완전히 data들이 다 sorting되어 있는 건 아니에요
sorting되어 있는 건 아닌데 제일 minimum만 제일 앞에 나와 있습니다
그래서 어떤 식으로 그렇게 하는 건지는 우리가 heep이라는
그런 트리 structure를 사용하게 되는데 그것에 대해서는 여러분들
data structure 시간에 배우실 거고 그래서 여기서는 일단
내부에서 어떤 일이 일어나게 되지만 어떤 성질을 갖게 되냐면
PriorityQueue 는 항상 head에 minimum을 가지게 된다라고 보시면 되겠습니다
그래서 head를 remove하고 나면 역시 하나가 minimum이 빠져나가잖아요 minimum을
그런데 그 다음에는 그 나머지 중에서 또 minimum이
가장 head에 와 있게 됩니다
항상 그렇게 돼 있어요
그래서 처음에 instancing 할 때는 PriorityQueue Integer
이런 식으로 주게 되고요
그 다음에 pq =  new PriorityQueue<Integer> 이런식으로
일반적으로 그냥 instancing 하는 식으로
type parameter를 줘서 instancing을 하면 되겠습니다
그런데 이 PriorityQueue를 maxumum으로 바꿀 수도 있어요
maxumum은 뭐냐면 Min이 아니라 Maximum data가
항상 head에 있도록 하는 거죠
그렇지만 역시 그 sorting되어 있지는 않습니다
그래서 얘는 예를 들면 PriorityQueue<Integer> 하고
new PriorityQueue<Integer> 하고 여기
Collections.reverseOrder() 이 Collections
아까 나왔었죠 Utility method를 가지고 있는 그런 class라고 했죠?
java.util 밑에 있고요
그래서 Collections 밑에 있는 그 reverseOrder() 라는 것이
이제 이게 Comparator라는 건데 이거를 주게 되면은
이 PriorityQueue 가 Mean Queue가 아니라 Max Queue로 바뀌어 버립니다
그래서 maxumum이 항상 head에 와 있도록 돼 있어요
자 그래서 이런 걸로 굉장히 그 유용한 일들을 많이 할 수 있는데

Page 38


여기서 그 PriorityQueue의 역시 method를 보면
add, clear, contains, iterator, offer
offer는 PriorityQueue에 data 하나를 추가하는 것이 되겠고요
remove는 오브젝트를 head에서 하나 remove하면서
걔를 return하며 remove하는 거고요
그 다음에 Queue에 기본적으로 peek하고 poll 이런 걸 다 가지고 있죠
그 peek이나 poll 같은 거를 다 사용할 수 있습니다
왜냐하면 PriorityQueue는 interface Queue를
implement하고 있기 때문에 그렇죠

Page 39

그래서 이런 PriorityQueue가 있을 때 또 얘를 한번 볼까요?
PriorityQueue 여기도 지금 priority Queue를 하나 만들었는데
mean Queue죠 여기 default로 아무것도 안 줬기 때문에 4를 add 하고
print 하면 [4] 이렇게 되고요 그 다음에 7을 add 하고
print 하면 [4, 7] 이 됩니다
그래서 4가 더 지금 더 작기 때문에
이 경우에 앞에 4가 항상 head에 있어요
그 다음에 2를 add 하면 이번에는 2가 이 head가 되죠
왜냐하면 2가 4보다 더 작거든요
그런데 희한한 것은 얘가 들어갈 때
[2, 4, 7] 이 되느냐 그건 아니에요
그렇게 되면 이 heep을 유지하기가 힘들어집니다
그 정도로만 그 얘기를 할게요
그래서 이 전체가 sorting되어 있는 건 아니다
하지만 minimum이 제일 앞으로 나온다
그 다음에 5를 집어 넣으면 [2, 5, 4, 7]
왜냐하면 5는 2보다 작지 않기 때문에 뒤쪽으로 가게 되죠
그렇다고 4보다 작기 때문에 얘가 뒤로 가느냐 그것도 아니라는 얘기죠
그 다음에 9를 집어 넣게 되면 [2 5 4 7 9] 9는 또 맨 끝으로 가게 되는데
그렇다고 해서 뭐 이게 지금 sorting이 돼 있느냐
그것도 아니에요 자 그 다음에 Queue를 peek를 하면 peek를 하면
peek는 지금 제일 head에 있는 걸 하나 가져와서 print하게 되고
여기까지는 아직 pop을 안 한 거죠 poll을 안 한 건데
여기서 remove를 해버렸어요 그러니까 removing 2 하고
여기서 peek이 return한 2를 print하는데 정작 2가
remove되는 건 뭐 때문이냐? 여기 remove 때문에
remove 때문에 print되고 그 다음에 Queue를 여기서 print했더니
[4, 5, 9, 7] 이 된 거죠 그 다음에 여기서는 그냥 간단히 for를 써서
Queue에서 for를 해버리고 Queue를 붙여서 print하면
이런 식으로 4가 return 되면서도 얘가 remove가 동시에 되죠
그래서 [5, 7, 9] 만 남게 됩니다
근데 보니까 뭐 597이 579가 되고 그래서 제일 앞으로 나오는 게
4가 앞으로 나오고 5가 앞으로 나오고 해서 minimum을 유지하는 건
맞는데 이 뒤에 순서는 꼭 sorting되어 있는 건 아니다

Page 40

자 그 다음에 iterator 라는 interface에 대해서 얘기를 하려고 합니다
뭐냐면, order가 있는, 그러니까 오더가 있을 때,
그 Collection의 data들에 access를 순서대로 가능하도록 하는 것입니다. 
그래서 iterator를 generate 할 때는 이런 식으로 하는 거죠
al 이  어떤 컬렉션이라고 하면
그 al 에서 iterator라는 method를 call 하면
바로 iterator를 새로 하나 만들어 줍니다
그러고 나선 이 iterator가 call 할 수 있는 method는
hasNext, next, remove 이런 것들이 있습니다
hasNext는 읽어올 요소가 남았는지 확인하고
있으면 true, 없으면 false를 return합니다
그 다음에 next는 다음 요소를 읽어오고요
next를 호출하기 전에 hasNext를 호출해서
읽어올 요소가 있는지 확인하는 것이 안전하다 그랬습니다
그 다음에 remove는 next로 읽어온 요소를 삭제하는데
next 를 호출한 다음에 remove 를 호출해야 됩니다
반드시 앞에 next 를 먼저 call 해야 된다 라는 얘기가 되겠습니다

Page 41

example을 하나 보면요
iterator도 역시 java.util 밑에 있고
arrayList를 쓰기 위해서 java.util arrayList를 import했습니다
그리고 나서 arrayList를 하나 만들었죠 arrayList를 만들어서 new 해가지고 
add를 C, A, E, B, D, F 이렇게 넣었습니다
Original Content of al 은 지금  iterator를 사용해서
한 바퀴 돌면서 print를 하려고 그래요
iterator를 새로 만들었는데 al 이 iterator를 call 해서
itr 이라는 iterator를 하나 만들었고요
itr의 hasNext는 불리한을 return하는데
뒤에 것이 있는지 없는지를 return한다 그랬죠.
hasNext가, 즉 Next가 있을 경우에 while 문으로 진입해서
element는 itr.next() 를 읽어오는 거죠
hasNext를 먼저 테스트해보고 그 다음에 next를 사용해라
그 다음에 System.out.println
print 해가지고 element를 print하게 이렇게 했습니다
이렇게 하면은 오리지널 콘텐츠 오브 al 은 들어간 순서대로
C A E B D F 이렇게 print가 되게 됩니다
사실은 for문을 쓰고 get을 쓰는 거나 별 차이는 없습니다 
그런데 이제 이 iterator가 유용한 것은 특히 그 뒤쪽에 오더가 없는
그런 Collection에 가면 어떻게 읽어야 되는지
전부 다 한 번씩 traverse를 해야 되는데 오더가 없기 때문에 좀 힘들어지거든요
그럴 때 이제 아이터레이터를 유용하게 사용할 수 있습니다

Page 42

그리고 ListIterator 는 bidirectional 로 바꿀 수가 있어요
그래서 next, previous 그러니까 뒤쪽으로 가는 거
앞쪽으로 가는 거 이거 다 가능해지고요
그 다음에 next index, previous index
그 다음에 add, remove, set
새로운 걸 추가한다거나 remove한다거나 아니면 변경한다거나
그럴 때 사용할 수 있습니다

Page 43

ListIterator 를 쓰는 것을 한번 볼게요 자
ArrayList al 역시 그 ArrayList를 만들었습니다 C, A, E 를 집어 넣었죠
처음에 ListIterator 를 하나 만들어서요 next 방향으로 진행하면서
그 앞에서 뒤로 진행하는 거죠 C, A, E 순서대로 하나씩 진행하면서
element를 next로 읽어 오게 되고요 그럼 얘를 현재 element에다가
플러스를 더 추가한 스트링으로 세팅을 하는 거죠
현재 C, A, E 가 있으니까 얘를 E+, A+, C+ 로 변경하게 됩니다
지금 순서가 반대로 나오고 있죠
그건 왜 그러냐 지금 litr이라는 List iterator가 지금 끝까지 다 갔어요
hasNext가 null 일 때까지 false일 때까지 끝까지 다 가고 나서
그 다음에 반대 방향으로 돌아오려고 하는 겁니다
litr의 has previous를 불러가지고 previous 쪽으로 계속 돌아와서
첫번 element까지 litr previous로 계속 읽어오고
element를 print하게 하는 거죠
이렇게 하면 여기서 순서는 C, A, E 가 될텐데
거꾸로 돌아오기 때문에 E, A, C 가 되고
거기에 아까 set을 했기 때문에
+ 가 더해져서 E+, A+, C+ 가 print 되게 되겠죠
ListIterator를 정방향, 역방향으로 왔다 갔다 하는데
사용할 수 있다라는 얘기가 되겠습니다

Page 44

마지막으로 우리가 Arrays라는 유틸리티가 있어요 유틸리티 class가 있는데
이게 이제 Arrays 뒤에 s가 붙어 있죠
이 Arrays가 굉장히 유용한 유틸리티입니다
그래서 여러분들이 아마 진작 알았으면 이 Arrays를 사용하려고 했을 텐데
그래서 보면 double type의 어레인데 { 1.0, 1.1,  1.2} 이렇게 들어가 있고
이거는 2D array arr이네요 그래서 이런 식으로 들어가 있습니다
이 values라는 array에 toString을 직접 하게 되면 이런 식으로 나오게 돼요
toString을 가지고는 있는데, 왜 가지고 있냐면
이 values가 arra가 되면 그 순간 오브젝트가 되거든요
그러니까 Object 의 toString을 이용하게 되는 거죠
그런데 우리가 이런 프리미티브 type이나 어떤 array 이든 간에
그 array type을 Object로 사용할 수는 있지만
그 Object class 자체의 method를 오버라이딩 할 수는 없잖아요
그래서 이 toString이 이상한 거 이렇게 print가 되게 되는데
이걸 바꿀 수가 없습니다
이럴 때는 Arrays를 사용하면요
Arrays에 toString이라는 이런 스태틱 유틸리티 method가 있습니다
그래서 여기에다가 values라는 array를 넣어주게 되면
이렇게 아까 우리가 Collections 에서 사용하던 그 print, println처럼
똑같이 이렇게 print가 되게 됩니다
그 다음에 Arrays.deepTostring 은
2 dimension 이상의 multi-dimensional array를
이렇게 print해주는데 사용합니다
equals인데요 이거는 역시 두 개의 array를 비교할 때
우리가 두 개의 array 비교할 때 이걸 equals 같은 것을 그냥
우리가 직접 짠다고 하면은 for 문 두 번 돌려서 이렇게 하는
그런 boolean method를 짜야 되겠죠? 근데
그것도 다 제공이 되고 있습니다 그래서 두 개의 array가 같을 때
이 arr1, arr2 가 내용이 같다는 거죠
내용이 같으면 이제 true를 return하게 되는 거고요
그 다음에 deepEquals 는 여기 앞에 있는 arr 과 arr3 가 
두 개가 내용이 똑같기 때문에 이것도 true로 하게 됩니다
즉 deepEquals() 는 multi-dimensional  array의
equality를 테스트하는데 사용하게 됩니다

Page 45

자 그 다음에 copyOf 하고 copyOfRange 가 있는데
copyOf 는 original array에 어느 영역에 들어가는 거를 만들어 주는 거죠
그래서 기본적으로 arr이 0, 1, 2, 3, 4일 때 arr length까지 length만큼의 크기를
그러니까 이걸 전부 다 들어가게 되겠죠
그래서 arr2는 0, 1, 2, 3, 4가 그대로 copy 가 되게 되고요
copyOf(arr, 3) 하면은 element 3개만 앞에서부터 0, 1, 2만 copy되고요
그 다음에 7은 이게 지금 5개밖에 없으니까 2개가 모자라잖아요
모자라는 것은 0으로 채워서 카피가 돼서 arr4로 만들어주게 됩니다
copyOfRange는 2부터 시작을 해서 4까지
0, 1, 2, 3, 4니까 시작 index endindex,
그래서 endindex-1까지 copy를 하게 되는 거죠
이것도 역시 이 index가 초과를 할 경우에
그럴 경우엔 0으로 채워서 이렇게 만들어 주게 됩니다
fill하고 setAll인데, fill은 어떤 같은 element로
다 arr을 fill하고 싶을 때는 이렇게 99999 이렇게 fill 되는 거고요
setAll은 이 뒤에 들어갈 value를 이런 식으로 지정을 할 수가 있어요
그래서 Math.random() * 5 + 1 이런 식으로
이렇게 하면 이게 1부터 6 사이에 랜덤 넘버가 채워지게 되겠죠

Page 46

자, 그 다음에 asList라는 게 있는데 이거는 List로 만들어주는 것이 되겠습니다
그래서 여기에 array element들을 쭉 넣어요 이런 식으로
그래서 쭉 넣어주고 이렇게 되면 이걸 List로 변환해서 return을 해 주는 거죠
그래서 이게 뭐에 편리하냐면 이 Collection들의 그 constructor에 보면
List를 뭉테기로 받아서 걔를 data로 한 List를 만드는
ArrayList나 아니면 뭐 LinkedList나 이런 걸 다 가지고 있습니다
그래서 data를 실제로 이렇게 주어서 만드는 방법이 없나요 하고
전부 add add add 하나씩 add를 해야 되나요
이렇게 고민을 하고 있을 수 있습니다
여기서 보면 이제 이런 이런 식으로 그 data를 쉽게 주어서
이렇게 List 로 만들어서 넘겨주게
Collection 으로 만들어서 넘겨 주게 되기 때문에
이렇게 Initialize 할 때 쉽게 사용할 수 있습니다
그 다음에 Sort하고 Binary Search도 다 구현이 돼 있어요
Arrays에 Sort하면 기본적으로 Array를 Sorting 하는 거고
그 다음에 [3 2 0 1 4] 는 [0 1 2 3 4] 로 이렇게 print 되는 거고
Binary Search는 뭐예요?
arr에 2가 있으면 Index를 return하고 아니면 -1을 return하게 돼 있습니다
여기까지 하도록 하겠습니다

