본 강의에서는 객체지향기법을 본격적으로 다루기 전에

Java의 reference type에 대해 알아보도록 하겠습니다.

페이지 2

이전에 봤던 Java 언어의 data type에 대해 다시한번 review를 해 보겠습니다.

먼저 primitive type에는

integer를 나타내는 byte, char, short, int, long 등이 있고

real number를 표시하는 float, double과

character를 나타내는 char,

logical type인 boolean이 있습니다.

이 primitive type은 value만 하나를 가지는 단순한 type인데

그 value들은 memory의 stack area에 저장이 됩니다.

페이지 3

Reference type은 reference (주소) 를 저장함으로써

object나 array등으로 모여있는 데이터의 집합을 가리키고 있습니다.

Stack area에 있는 reference variable들의 value는

바로 heap area의 object의 주소로 볼 수 있습니다.

이 그림에서 String type의 str1 object는

"Korea"라는 value를 가지고 있습니다. 

str1 variable 자체는 stack area에 있고,

str1의 value는 String object의 reference, 즉, 주소입니다.

이 String object는 heap area에 있습니다

마찬가지로 str2 variable의 value는

"Seoul" 이라는 String object의 reference 입니다

str3의 경우는 str2과 같은 reference value를 가지고 있으며,

따라서 역시 "Korea" 라는 String object를 가리키고 있습니다

페이지 4

여기서는 Java JVM의 Memory 구조에 대해 알아보겠습니다.

Method Area에는 Java program에서 사용되는 class information과 함께

class variable, 즉, static variable이 저장됩니다.

이 area에는 Bytecode인 .class file을 읽어 들여서

class와 interface에 대한 runtime constant들, 

여러 형식의 variable들

constructor와 methods를 저장합니다.

이 area는 program이 시작하기 직전에 load되고

프로그램이 종료 될 때 소멸됩니다.

compile time에 알려진 숫자 리터럴(literal)부터

런타임에 확인되어야 하는 메소드와  여러 constant가 포함됩니다.

Method area는 memory의 가장 낮은 주소 영역에 존재하며

그 크기는 변하지 않습니다.

Heap Area는 Java 프로그램을 위한

모든 class object들의 instance들이 저장됩니다.

New operator를 실행하는 순간 object가 dynamic하게 allocate되고

이 object 데이터는 runtime에 JVM에 의해 관리됩니다.

Heap은 메모리의 가장 낮은 주소로 부터 높은 주소쪽으로 확장됩니다.

Stack은 Java 프로그램에서 method가 호출될 때

method의 stack frame이 저장되는 영역입니다.

Java 프로그램에서 method가 호출되면 JVM은 method 호출과 관련된

로컬 변수 및 매개 (parameter) 변수를 stack 영역에 저장합니다.

이 stack 영역은 method 호출과 함께 할당되며

method 실행이 끝나면 소멸됩니다.

stack 영역에 저장된 method 호출 정보를 stack frame이라고 합니다.

stack 영역은 push를 통해 데이터를 입력하고 pop을 통해 데이터를 출력합니다.

이러한 stack은 마지막으로 저장된 데이터가 가장 먼저 pop되는

LIFO (Last in, First out)  방식으로 작동합니다.

Stack 영역은 메모리에서 높은 주소에서 낮은 주소 방향으로 할당됩니다.

PC 레지스터는 현재 실행 중인 JVM 명령어의 주소를 포함합니다.

CPU의 PC (Program Counter)에 해당하며,

프로그램 실행은 CPU에 명령을 내리는 방식으로 이루어집니다.

명령어를 실행하는 동안 CPU는

레지스터라고 하는 CPU의 메모리에 필요한 정보를 저장합니다.

CPU는 명령어를 실행하는 동안 필요한 정보를 레지스터에 저장하는데,

레지스터는 연산 결과를

메모리로 전달하기 전에 저장하는

CPU 내부 메모리 장치입니다.

따라서 CPU 레지스터의 이러한 역할은

JVM에서 논리적 메모리 영역을 말합니다.

Native method stack 영역은 Java 이외의 언어로

작성된 코드를 Java와 함께 이용하기 위한 stack 입니다.

예를 들면 C, C++ 등의 코드를 Java 코드와 함께 실행하기 위한 stack입니다.

네이티브 method의 parameter, 로컬 변수 등을 bytecode 로 저장합니다.

페이지 5

primitive type variable들에서 == (이퀄)과 != (낫이퀄)의 의미는

두 variable들의 value가 같은지 아닌지를 테스트 하는 것입니다.

이 예에서는 x가 3, y가 2일 때 x와 y의 value가 같은지, or

x와 (y+2) 의 value가 같지 않은지를 테스트하고 있습니다

Reference type variable들에 대해서는

그 value들이 나타내는 reference (주소)가 같은지 아닌지를 나타내는 것입니다.

즉, 두 reference variable이

같은 address를 참조하고 있는지 아닌지를 나타내는 것입니다.

페이지 6

프로그램에 출현하는 String variable a, b, c, d, e 가

어느 곳의 무엇을 가리키게 되는지 주의 깊게 살펴보도록 합시다.

new String(“test”) 로 create되는 a와 b는

정상적인 String object이기 때문에 heap 영역에 만들어지게 됩니다.

String의 내용이 a, b가 모두 “test” 이기는 하지만

이 들은 모두 별개로 생성된 object들 이므로

차지하고 있는 memory 영역이 다릅니다.

c와 d는 String literal을 assign 받는데, literal은 Method 영역에 만들어져서

같은 내용의 literal을 두번 만들지는 않습니다.

e는 a를 그대로 assign 했으므로 a와 같은 reference value를 가집니다.

이에 따라 아랫부분의 a, b, c, d, e 간의 equal 여부는

그 reference (주소)가 동일한 지의 여부에 따라 결정됩니다.

페이지 7

null은 아무 object도 가리키지 않는 reference를 나타냅니다.

class variable을 declare하지만 그 object를 create할 수 없는 상황에서

일단 initial value를 null로 해 놓을 수 있습니다.

이렇게 해 놓으면 variable이 valid한 object를 가리키고 있는지 아닌지를

null과의 이퀄리티 테스트에 의해 쉽게 결정할 수 있습니다.

한편 null reference를 가진 class variable s가 있을 때

s가 valid한 object를 가리키고 있다고 착각하여

s.length() 처럼 method를 call하거나

s.x 처럼 instance variable을 access하려 하는 것은 (dereferencing 시도)

NullPointException을 발생시킵니다.

exception은 error와는 종류가 다르며

exception이 있을 것을 대비한 code를 개발자가 미리 준비해 둘 수 있습니다.

exception handling에 대해서는 추후 더 자세히 알아볼 것입니다.

페이지 8

빨간 상자에 담겨 있는 코드는 NullPointerException을 발생시킵니다.

str이 아무런 initialization이 되어 있지 않기 때문에

str이 null과 같지 않냐는 테스트는 true로 통과하게 되어 있고

따라서 true part의 str.length() 를 시도하는 순간

exception이 발생하게 될 것입니다.

그래서 아랫부분에서 처럼

str을 일단 null로 초기화해 놓고

이 문제를 str이 null 이 아닌지를 테스트하는 것은 정확하기 때문에

else part에서 “str is null” 을 프린트하게 됩니다.

페이지 9

한편 str을 “Hello” 로 초기화 해 놓는다면

정상적으로 str 낫이쿠얼 null 이 true가 되고

“Length of str: “ 과 함께 str.length() 가 프린트 욉니다.