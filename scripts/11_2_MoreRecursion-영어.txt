Recursion Let's start the second lecture
Page 2
This time, let's calculate x to the nth power using the recursive method
In the main method, the recursive method
power(3, n) is called to sequentially find the values from 3^0 to 3^3
while increasing n from 0 to 3
If calculated correctly, the output should be like this
Now let's look at the recursive method power(int x, int n)
First, we test whether n is less than 0
Even if n is a negative integer, calculations such as 1/3, 1/9, ...
are performed, but here, we will end the program without considering the case
where n is a negative integer
If n is greater than or equal to 1, the recursive call case is executed
Since x to the nth power is x to the (n-1) power times n,
we call power(x, n-1) and multiply the result by x and return it
The stopping case is
when n is 0, so return 1
As such, a recursive method must have a stopping case
and a recursive call
Page 3
Now let's see how the recursive call of power(2, 3) is executed
In step 1), while executing power(2, 3), power(2,2) is called
In Step 2), while executing power(2,2), power(2,1) is called, and in Step 3),
while executing power(2,1), power(2,0) is called
In Step 4), power(2,0) returns 1 as a stopping case
In Step 5), if you substitute the result of Step 4) into power(2,0) of Step 3),
power(2,1) is calculated as 1 times 2, which is 2
In Step 6), if you substitute the result of Step 5) into power(2,1) of Step 2),
power(2,2) is calculated as 2 times 2, which is 4
In Step 7), if you substitute the result of Step 6) into power(2,2) of Step 1),
power(2,3) is calculated as 4 times 2, which is 8
Page 4
When designing a solution using the recursive method to solve a problem,
let's learn how to check whether this solution is correct
First, we need to make sure that the recursion does not repeat infinitely
Secondly, we need to make sure that each stopping case executes the correct action
Third, we need to make sure that all recursive calls perform the correct action
and that the overall case, when combined, behaves correctly
Page 5 Let's design
a binary search in a recursive manner
and verify whether this solution is correct
using the method mentioned above
A binary search problem is a problem
of finding whether a given value exists in an array
In order to use the binary search algorithm,
the data in the array must be sorted
For convenience, we assume that it is sorted in ascending order
If a value is found through search,
the index of that value is returned
If not found, -1 is returned
When implementing binary search using recursion,
the search space is reduced by half
for each recursive call
This approach is called “divide and conquer.”
Page 6 The execution of the search
method that performs a binary search
is summarized in a diagram
The search method is given three parameters:
first, last, and key
first and last are the start and end indexes, respectively,
that indicate the search range of the array
Key is the value to be searched
When you call search for the first time,
you should set first to 0 and last to a.length - 1 to cover the entire range of the array
In our example, first is 0, last is 9,
and the target value key is 63
In the search method, the mid index is calculated by adding first and last
and dividing the value by half,
and then testing whether the a[mid] value of array a is equal to the key
In our example, mid is 4 and a[4] is 57,
which is less than key 63
In this case, a[mid] is smaller than key
We can narrow the search range to mid + 1 to last
So the recursive call would be search(5, 9, 63)
In this case, mid is 7 and a[7] is 80, which is greater than key
In this case, we can narrow the search range from first to mid-1,
so the recursive call would be search(5, 6, 63)
Since mid is 5 and the value of a[5] is 63,
this is the case where the desired key is found
Now we just need to return the index 5 which has the key value
Page 7
This time, let's look at the case
where the given key value does not exist in the array
search(0, 9, 37) is the first call, and since mid is 4 and a[4] is 57,
which is greater than 37, we recursively call search(0, 3, 37)
mid becomes 1, and a[1] is 20,
which is less than 37, so search(2, 3, 37) is called recursively
mid becomes 2, and a[2] is 35,
which is less than 37, so search(3, 3, 37) is called recursively
mid is 3, and a[3] is 41,
which is greater than 37, so search(3, 2, 37) is called recursively
Here, the first 3 is greater than the last 2
That is, the given search range becomes invalid
and the condition that the key being searched
does not exist in this array is satisfied
Therefore, it returns -1
Page 8
I have rewritten the process we have seen so far into program code
The search method is given a reference to array a, the first and last indexes,
and the target key value as parameters
The result variable will ultimately hold the index of the answer (or -1)
There are two stopping cases in this method
The first is when the key value does not exist in the array
If first is greater than last,
this case is satisfied and -1 is assigned to the result
The second stopping case is when the key value exists in the array
If the value of a[mid] is the same as the key,
then the mid index is assigned to the result
There are also two recursive calls, the first of which is for the case
where the key value is smaller than a[mid]
At this time, we recursively call search(a, first,
mid-1, key) and assign its return value to result
The second recursive call is for cases where the key value is greater than a[mid]
In this case, search(a, mid+1, last, key)
is recursively called and its return value is assigned to result
Finally, you just need to return the result obtained above
Page 9
Now let's check whether the search method we wrote is the correct solution
This check proceeds in three steps as mentioned on page 4
First, we show that this recursion does not repeat infinitely
If the key exists in the array,
the method will not repeat
infinitely due to the stopping case, which returns mid
If the key does not exist in the array,
the value of first will remain the same
or increase to mid + 1 for each recursive call
Also, the value of last will either remain the same or decrease to mid – 1
So there will come a time when first becomes greater than last
That is, -1 is returned by the stopping case
where first is greater than last,
so infinite repetition does not occur
Page 10 The second step shows that
the stopping cases work correctly
The search method has two stopping cases
First, when first is greater than last, the search range cannot be set in the array
Therefore, it returns -1
since the key cannot exist in this array
Secondly, when a[mid] is equal to key,
the key value has been found, so mid is returned
So in both cases it is working correctly
Page 11 Thirdly, we show that all recursive
calls work correctly
This method has two recursive calls
In the first case, when the key value is less
than a[mid], since array
a is sorted, all values from a[mid] to a[last] are greater than key
Therefore, it is reasonable to reduce the search range from first to mid-1
Even if the key exists in the array, it will be in this reduced range
In the second case, when the key value is greater
than a[mid], since array
a is sorted, all values from a[first] to a[mid] are less than key
Therefore, it is reasonable to reduce the search range from mid+1 to last
Even if the key exists in the array, it will be in this reduced range
So far, we have shown that all three conditions are satisfied,
and therefore the recursive method
for binary search works correctly
Page 12 Finally, let's
learn about the efficiency of Binary Search
When the array size is n, for reference,
if you perform a serial search on the array, in the worst case
you have to look at everything from the first element
a[0] to the last element a[a.length – 1],
so the time complexity in the worst case is on the order of n, that is, O(n)
In the case of binary search,
the worst case time complexity is O(log n),
which is much faster than the O(n) of serial search
The figure shows that the size of n search ranges
is reduced by half to n/2, n/4, ..., 1,
and in the worst case,
even if the size of the search range goes down to 1,
it only takes log_2 n steps in that worst case