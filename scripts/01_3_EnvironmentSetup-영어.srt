1
00:00:00,000 --> 00:00:01,230
Page 1

2
00:00:01,230 --> 00:00:05,120
In this lecture, we will set up

3
00:00:05,120 --> 00:00:07,760
the software environment

4
00:00:07,760 --> 00:00:10,270
required to develop Java programs

5
00:00:10,270 --> 00:00:12,460
It is easy to install and use,

6
00:00:12,460 --> 00:00:13,660
so please follow along

7
00:00:13,660 --> 00:00:16,790
Java Development Kit (JDK)

8
00:00:16,790 --> 00:00:20,580
includes not only the JVM but also various tools

9
00:00:20,580 --> 00:00:22,770
for Java program developers

10
00:00:22,770 --> 00:00:26,530
For example, javac, i.e., the Java compiler,

11
00:00:26,530 --> 00:00:30,450
java, i.e., the byte code interpreter, etc

12
00:00:30,450 --> 00:00:32,660
A subset of the JDK intended only for program users,

13
00:00:32,660 --> 00:00:36,250
not developers, is called the Java

14
00:00:36,250 --> 00:00:40,090
Runtime Environment (JRE)

15
00:00:40,090 --> 00:00:44,350
In other words, since users are not people who develop programs,

16
00:00:44,350 --> 00:00:48,740
JRE can be seen as a JDK that excludes tools

17
00:00:48,740 --> 00:00:51,060
used only for development

18
00:00:51,060 --> 00:00:55,400
Sometimes, when you try to install and run a program developed in Java,

19
00:00:55,400 --> 00:00:59,080
you will be prompted to download JRE if you do not have it

20
00:00:59,080 --> 00:01:01,850
This is because JRE is essential for running programs

21
00:01:01,850 --> 00:01:04,590
developed in Java

22
00:01:04,590 --> 00:01:08,170
JDK and JRE

23
00:01:08,170 --> 00:01:11,330
can be downloaded from

24
00:01:11,330 --> 00:01:13,520
Oracle's Java Technology Site,

25
00:01:13,520 --> 00:01:14,800
the owner of Java. Page 3

26
00:01:14,800 --> 00:01:19,210
To download the JDK,

27
00:01:19,210 --> 00:01:22,400
go to the Oracle Technology site

28
00:01:22,400 --> 00:01:23,680
and click on the latest version of JavaSE. Page 4

29
00:01:23,680 --> 00:01:27,780
Download and install the appropriate JDK

30
00:01:27,780 --> 00:01:30,520
depending on whether your OS

31
00:01:30,520 --> 00:01:33,840
is Windows, macOS

32
00:01:33,840 --> 00:01:35,150
M Chips, or macOS Intel chips. Page 5

33
00:01:35,150 --> 00:01:38,860
To check if the JDK is installed properly,

34
00:01:38,860 --> 00:01:41,580
open a console window and run the command

35
00:01:41,580 --> 00:01:45,500
java -version in it

36
00:01:45,500 --> 00:01:50,020
If the Java version is displayed,

37
00:01:50,020 --> 00:01:51,300
the JDK is installed correctly. Page 6

38
00:01:51,300 --> 00:01:55,450
Documentation for APIs included in JDK

39
00:01:55,450 --> 00:01:58,480
is provided

40
00:01:58,480 --> 00:02:05,400
online by Oracle Visit docs.oracle.com/en/java/javase and click on

41
00:02:05,400 --> 00:02:08,530
the JDK version you

42
00:02:08,530 --> 00:02:09,890
installed. Page 7

43
00:02:09,890 --> 00:02:14,720
Select API Documentation from the left menu area

44
00:02:14,720 --> 00:02:16,080
On the Page 8 API Documentation

45
00:02:16,080 --> 00:02:19,740
page, type the name of the desired class

46
00:02:19,740 --> 00:02:23,190
in the search box to search

47
00:02:23,190 --> 00:02:27,500
For example, you can search for a class called ‘System’

48
00:02:27,500 --> 00:02:28,860
Page 9 The documentation for the ‘System’ class is displayed

49
00:02:28,860 --> 00:02:32,650
Above the class name, the name of the package

50
00:02:32,650 --> 00:02:37,220
to which the class belongs is displayed

51
00:02:37,220 --> 00:02:42,240
For example, the System class is in the java.lang package

52
00:02:42,240 --> 00:02:44,560
Fields contain descriptions of instance

53
00:02:44,560 --> 00:02:48,870
variables or constants belonging to the class

54
00:02:48,870 --> 00:02:50,150
Page 10

55
00:02:50,150 --> 00:02:53,830
Below that, the methods belonging to the class are listed

56
00:02:53,830 --> 00:02:55,970
so you can see how to use them

57
00:02:55,970 --> 00:02:59,080
You can see the return type of the method, parameters,

58
00:02:59,080 --> 00:03:01,670
and what it does

59
00:03:01,670 --> 00:03:06,190
If you click on each method name,

60
00:03:06,190 --> 00:03:07,680
you can see a more detailed explanation

61
00:03:07,680 --> 00:03:09,900
Page 11 Before using the IDE that will be installed later, i.e

62
00:03:09,900 --> 00:03:14,600
the Integrated Development Environment, let's

63
00:03:14,600 --> 00:03:17,890
take a look at the process of compiling and running a Java

64
00:03:17,890 --> 00:03:21,290
source program in the Console window

65
00:03:21,290 --> 00:03:24,560
Write the source code of the Java program

66
00:03:24,560 --> 00:03:26,860
using a suitable text editor

67
00:03:26,860 --> 00:03:30,440
In this example, we created a class source

68
00:03:30,440 --> 00:03:33,370
file called FirstProgram.java

69
00:03:33,370 --> 00:03:37,130
The class name and the source

70
00:03:37,130 --> 00:03:38,650
file name must match

71
00:03:38,650 --> 00:03:40,790
Page 12 Type

72
00:03:40,790 --> 00:03:44,690
the “Javac FirstProgram.java” command

73
00:03:44,690 --> 00:03:46,520
in the console

74
00:03:46,520 --> 00:03:48,580
to compile the source code into byte code

75
00:03:48,580 --> 00:03:52,550
If compilation is successful, you can see that a bytecode program called

76
00:03:52,550 --> 00:03:56,630
FirstProgram.class has been generated

77
00:03:56,630 --> 00:03:59,950
To see a list of files in the current folder,

78
00:03:59,950 --> 00:04:02,170
you can use the “dir” command on Windows

79
00:04:02,170 --> 00:04:06,220
or the “ls” command on macOS

80
00:04:06,220 --> 00:04:09,350
Now to run the Byte code program,

81
00:04:09,350 --> 00:04:11,570
run the JVM interpreter “java FirstProgram” command

82
00:04:11,570 --> 00:04:14,700
You need to type the command

83
00:04:14,700 --> 00:04:17,440
excluding the

84
00:04:17,440 --> 00:04:19,970
extension .class from the Byte code program

85
00:04:19,970 --> 00:04:24,830
file name, FirstProgram.class

86
00:04:24,830 --> 00:04:29,580
As the JVM runs, you will see the output

87
00:04:29,580 --> 00:04:32,530
“Hello World!” printed to the console

88
00:04:32,530 --> 00:04:34,100
Page 13

89
00:04:34,100 --> 00:04:39,640
Now let's install the IDE, i.e

90
00:04:39,640 --> 00:04:42,830
IntelliJ IDEA, the Integrated Development Environment

91
00:04:42,830 --> 00:04:47,090
Download and install the “community

92
00:04:47,090 --> 00:04:50,540
edition” of IntelliJ IDEA

93
00:04:50,540 --> 00:04:53,150
from the JetBrains website

94
00:04:53,150 --> 00:04:57,300
The community version is a free version

95
00:04:57,300 --> 00:04:58,870
that has enough features for this course

96
00:04:58,870 --> 00:05:02,580
Page 14 After installing IntelliJ IDEA,

97
00:05:02,580 --> 00:05:05,190
run it and click the New Project button

98
00:05:05,190 --> 00:05:06,710
Page 15 Enter a name for the project

99
00:05:06,710 --> 00:05:09,010
and select the folder where you want to save

100
00:05:09,010 --> 00:05:12,950
the project files

101
00:05:12,950 --> 00:05:17,390
If you use Git, you can check “Create Git

102
00:05:17,390 --> 00:05:22,120
repository” to automatically upload the completed source codes to GitHub

103
00:05:22,120 --> 00:05:25,780
Let's not select this option here

104
00:05:25,780 --> 00:05:29,380
If you have multiple JDK versions installed,

105
00:05:29,380 --> 00:05:32,930
you can select the JDK you want

106
00:05:32,930 --> 00:05:38,290
Usually, you can just select the latest version of the JDK that you have installed

107
00:05:38,290 --> 00:05:42,420
The “Add sample code” option

108
00:05:42,420 --> 00:05:46,000
is a feature that allows IntelliJ IDEA to automatically generate sample code,

109
00:05:46,000 --> 00:05:49,660
but we will not select this option here

110
00:05:49,660 --> 00:05:53,550
Once all inputs are completed,

111
00:05:53,550 --> 00:05:55,640
click the “Create” button at the bottom

112
00:05:55,640 --> 00:05:57,160
left to create a project. Page 16

113
00:05:57,160 --> 00:06:00,900
You will now be taken to the project screen you just created

114
00:06:00,900 --> 00:06:04,400
The src folder is empty

115
00:06:04,400 --> 00:06:07,060
because we haven't created any source code yet

116
00:06:07,060 --> 00:06:08,680
Page 17 Place the mouse pointer over the src folder

117
00:06:08,680 --> 00:06:12,490
and press the right mouse button

118
00:06:12,490 --> 00:06:16,230
to bring up a popup menu

119
00:06:16,230 --> 00:06:18,630
Select New from the menu,

120
00:06:18,630 --> 00:06:22,500
then select Java Class from the sub menu that appears

121
00:06:22,500 --> 00:06:24,070
Page 18 When the New Java Class window appears,

122
00:06:24,070 --> 00:06:26,370
type the class name you want to create

123
00:06:26,370 --> 00:06:30,760
at the top and press Enter

124
00:06:30,760 --> 00:06:35,100
Here, we entered the class name “TestClass”

125
00:06:35,100 --> 00:06:36,640
Page 19

126
00:06:36,640 --> 00:06:40,720
Now the “TestClass.java” source file is generated

127
00:06:40,720 --> 00:06:43,460
I want to emphasize again that the class name

128
00:06:43,460 --> 00:06:47,250
and the source file name must be the same

129
00:06:47,250 --> 00:06:51,350
Now just type the program source into the source input

130
00:06:51,350 --> 00:06:52,730
window. Page 20

131
00:06:52,730 --> 00:06:56,330
Now, to compile the source file into bytecode,

132
00:06:56,330 --> 00:06:59,800
select Build Project from the Build menu

133
00:06:59,800 --> 00:07:03,670
The shortcut is Ctrl + F9 on Windows, or Command + fn

134
00:07:03,670 --> 00:07:08,420
+ F9 on macOS

135
00:07:08,420 --> 00:07:10,040
Page 21

136
00:07:10,040 --> 00:07:12,600
You can now see an “out” folder

137
00:07:12,600 --> 00:07:16,920
created in the file navigator on the left

138
00:07:16,920 --> 00:07:21,220
“TestClass” is created under the out

139
00:07:21,220 --> 00:07:23,540
> production > TestProject folder,

140
00:07:23,540 --> 00:07:26,890
which represents the TestClass.class

141
00:07:26,890 --> 00:07:29,290
file, which is a bytecode file

142
00:07:29,290 --> 00:07:33,570
To verify that the bytecode file was actually generated,

143
00:07:33,570 --> 00:07:37,650
check that the TestClass.class file was created

144
00:07:37,650 --> 00:07:42,380
under the out folder

145
00:07:42,380 --> 00:07:43,970
in explorer (Windows) or finder (macOS)

146
00:07:43,970 --> 00:07:45,620
Page 22 To run the bytecode program

147
00:07:45,620 --> 00:07:50,770
by running the JVM interpreter,

148
00:07:50,770 --> 00:07:53,700
select Ctrl + r or click the Run button

149
00:07:53,700 --> 00:07:57,280
(the play triangle)

150
00:07:57,280 --> 00:08:00,620
You should see the program's output

151
00:08:00,620 --> 00:08:04,430
printed in the terminal window

152
00:08:04,430 --> 00:08:06,150
at the bottom of IntelliJ. Page 23

153
00:08:06,150 --> 00:08:10,700
After you are done working, you can close the project

154
00:08:10,700 --> 00:08:13,050
by selecting the “File > Close Project” menu

155
00:08:13,050 --> 00:08:15,400
After closing the project, you can see

156
00:08:15,400 --> 00:08:19,110
a list of all the projects you have

157
00:08:19,110 --> 00:08:23,810
created and enter the project

158
00:08:23,810 --> 00:08:25,460
by selecting each project with the mouse. Page 24

159
00:08:25,460 --> 00:08:28,590
This time, we will learn how to import

160
00:08:28,590 --> 00:08:32,480
already written source files into IntelliJ

161
00:08:32,480 --> 00:08:36,140
Source files must be

162
00:08:36,140 --> 00:08:41,340
in the format of having java source files

163
00:08:41,340 --> 00:08:43,010
under the src folder

164
00:08:43,010 --> 00:08:46,280
under the folder with the project name

165
00:08:46,280 --> 00:08:49,620
Page 25 Select File > Open from the Main menu

166
00:08:49,620 --> 00:08:51,270
and select the prepared project folder

167
00:08:51,270 --> 00:08:54,610
Page 26 When the project is read and created by IntelliJ,

168
00:08:54,610 --> 00:08:58,580
the source files will be placed under the src folder
