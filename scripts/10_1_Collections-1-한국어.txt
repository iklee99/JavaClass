Collection 시작하겠습니다.

Page 2

Collection Framework이라고 하는 것은
여러 가지 data group을 저장하기 위한 그런 class들을
standard화 (표준화) 해 놓은 그런 것이다 라는 거죠
여러 가지 interface들이 있고요
지금 네모로 되어 있는 것은 interface들이고
여기 동그랗게 돼 있는 것들은 class들입니다
multiple data를 저장하고 access하는 데 있어서
손쉬운 방법을 제공해 준다 라는 것이 되겠습니다
여기 보면 Collection이 사실 Iteratable이라는 interface의 Child인데요
그 다음에 Collection 밑에는 List, Queue, Set
이런 interface들이 있고
그 다음에 얘들과는 별도로 Map이라는 interface가 또 있습니다
Map은 이 Collection 안에 속하지는 않지만
Collection과 비슷한 그런 역할을 하기 때문에
같이 취급이 되구요
또 List 밑에는 Vector,  ArrayList, LinkedList 이런 것들이 있고
Queue 밑에는 Deque, PriorityQueue 이런 게 있고요
그 다음에 Stack은 Vector로 implement되고 이런 식으로 돼 있습니다
이번 코스에서는 Set하고 Map은 제외하고요
요 부분, 즉 List와 Queue 부분만 다루도록 하겠습니다

Page 3

Collection Framework의 Core Interface들에 대한
서로 다른 점들에 대해서 먼저 얘기를 하면
List Interface는 ordered set of data
순서가 있다는 거죠. 순서가 있다는 것은
들어갈 때 sorting이 된다 이런 게 아니라
데이터를 집어 넣은 순서가 유지된다 이런 뜻이 되겠습니다
순서가 유지된다 그 다음에 duplicate data를 허락한다 그러니까
같은 데이터라도 여러 번 들어갈 수 있다 것이 되겠죠
waiting list 같은 건데요
이름이 같은 사람이 여러 명 있을 수 있으니까 duplicate 를 허락하고
그 다음에 waiting list에는 도착한 순서대로 기록이 돼야 되겠죠
그래서 order가 유지가 된다 라는게 되겠습니다
그래서 이 안에 class들은
ArrayList, LinkedList, Stack, Vector 이런 것들이 있겠습니다
그 다음에 이제 set 인데요
set은 우리가 여기서 자세히 다루지는 않지만
특징을 살펴보면 order가 없습니다 order가 없고
그러니까 집어 넣은 그 순서가 유지가 되지 않는다는 거죠
그러니까 이렇게 어떤 data를 Collection에
집어 넣을 수도 있고 그 다음 뺄 수도 있지만
그 순서는 유지가 안 된다
그게 몇 번째로 들어왔는지는 유지가 안 된다라는 뜻이 되겠습니다
그리고 그 duplicate 데이터를 허락하지 않는다 라는 뜻이 되겠습니다
그래서 set of 4족, 그러니까 4개의 발을 가진 animal의 set이다
그러면 dog, cat, bear, lion 이런 것들이 들어가 있겠죠
그래서 이런 것들이 뭐 duplicate 서는 안 되잖아요
그래서 그게 이제 set의 정의라고 볼 수 있겠고
class들은 HashSet, TreeSet 이런 것들이 있습니다
map은 tuple로 이루어진 그런 데이터다 라는 거죠
그래서 하나의 data item이 이렇게 쌍으로 되어 있어요
key하고 value. 그래서 순서는 유지되지 않고요 역시
그 다음에 key는 duplicate 되지 않고요
그 다음에 value는 중복을 허용한다 라는 뜻이 되겠습니다
예를 들면 postal code (우편번호) 같은 거는 area number 이렇게 돼 있는데
area는 key가 되겠고 number는 value 입니다. 
그래서 서울은 우편번호가 얼마다 이런 거고요
local phone number는 area number 이런 식으로
서울 02 부산 051 뭐 이런 식으로 되는 거죠
그래서 class에 예는 HashMap, TreeMap, HashTable,
Properties 이런 것들이 있어요
그 중에 우리는 List를 중점으로 다룰 거고
그것과 유사한 Queue에 대해서 좀 알아볼 거고요

Page 4

그래서 interface Collection에는 공통적으로 가지게 되는
여러 개의 method들이 있습니다
그것들이 이제 child interface나 child class에 따라서
조금 바뀔 수도 있기 때문에
그렇지만 공통적으로 가지고 있는 것들은 이런 것들이 있다
이 Collection들은 전부 generic으로 되어 있거든요
generic interface로 되어 있기 때문에
이 Collection하고 다음에 <type>이 들어가도록 돼 있죠
그래서 이 generic의 class를 집어넣는 그게 이제 add가 되겠습니다
addAll은 여기에 Collection을 줘요
그래서 다른 Collection에 있는 모든 element를
다 한꺼번에 집어넣는 것이 되겠습니다
그 다음에 clear는 완전히 데이터를 다 삭제하는 거고요
contains는 주어진 Object o가 있으면 boolean true
아니면 false
contains all은 주어진 Collection이 다 그 안에 들어가 있으면 true
아니면 false
자 equals는 뭐 아시겠죠 Object o가 Collection 안에 속해 있으면 true
네, hashCode라는 이것도 이제 Object class에 정의가 되어 있기 때문에
사실은 모든 class에 전부 inherit가 되는
그런 일반적인 class 중에 하나입니다 toString이나 equals같이
자, 그 다음에 isEmpty는 empty면 true
아니면 false를 return하고요
iterator는 Collection에 속해있는 element들을 한바퀴 쭉
트래블스 하는데 사용될 수 있는 그런 것이고요
iterator라는 타입으로 되어 있습니다
이 iterator에 대해서는 뒷부분에서 좀 다를 것이고요
그 다음에 remove는 주어진 object를 remove하는 거고
그 다음에 removeAll은 Collection에 들어있는 모든 것들을
다 remove 하는 것이 되겠습니다

Page 5

그 다음에 retainAll은 주어진 Collection에도 들어있는 것들만 남기고
다른 건 다 삭제하는 거에요
말하자면 retain all 을 call 한 Collection과 주어진 Collection 간에
intersection을 구한다 이렇게 보면 되겠죠
그 다음에 size는 collection의 데이터 개수를 return하고요
toArray는 collection에 들어있는 모든 element를
일반적인 object의 array 즉 collection에 속해 있는 type의 array로
만들어주는 그런 method가 되겠습니다

Page 6

자 그 다음에 List interface인데요
List interface는 아까 얘기했듯이 order하고 duplication을 둘 다
허용한다 그랬어요 그래서 데이터가 List에 도착한 순서대로
즉 add된 순서를 그대로 유지하고요 그 다음에 중복을 허용한다는 게 되겠죠
그래서 List는 여기 있습니다
Collection의 아래 있는 하나의 interface가 되겠습니다

Page 7

List의 method들도 parent인 Collection의 method들과 거의 같습니다
그래서 add들이 있고 addAll, clear, contains,
containsAll, copyOf, 그 다음에 equals,

Page 8

그 다음에 get이 있죠 get은 이제 어떤 특정한 index에 들어가 있는
element를 return하게 되겠습니다
여기서 index가 가능한 것은 List이기 때문에 그렇죠
List는 순서가 유지되기 때문에
자기가 몇 번째 index를 가지고 있는지를 아는 거죠, order가 있기 때문에.
근데 뒤에 뭐 set이나 map 같은 거는 사실
순서가 유지되지 않기 때문에
이 get 메소드를 가질 수가 없겠죠
그 다음에 hashcode. 그 다음에 indexof 이거는 object
이것도 역시 List가 order를 유지하기 때문에 가능한 거고요
isEmpty(), iterator(). 
lastIndexOf(Object o) 는 오가 여러 개가 들어가 있을 수 있잖아요
중복이 여러 개 될 수 있는데 그 중에 가장 마지막 index,
가장 끝 쪽에 들어있는 index를 return하게 됩니다.

Page 9

그 다음에 remove 뭐 이거는 index에 있는 object를 remove 하는 거고
그 다음에 remove object를 직접 줘서 그것을 remove 하는 거고
그 다음에 removeAllCollection은
collection 안에 들어있는 걸 전부 remove 하는 거고
retainAll은 마찬가지로 collection 안에 들어있는 것만 남기고
다 삭제하는 거고요
그 다음에 set은 어떤 특정한 index의 element를 set 하는 거고요
size는 size, sort.
sort도 직접 가지고 있기 때문에 어떤 주어진 Comparator에 의해서
그 관계에 의해서 sorting이 가능하게 되겠습니다
그 다음에 sublist는 index 두 개가 주어져서
그 안에 있는 것들을 List로 만들어서 return하게 되겠고요
그 다음에 toArray는 역시 일반적인 array로 만들어서 return하는 것이 되겠습니다

Page 10

자 그래서 List 아래는 Vector하고 ArrayList 가 있는,
그 다음에 LinkedList가 있죠
Vector는 ArrayList 와 비슷한 건데
좀 옛날 거라서 거의 안 쓰인다 하는데
Stack 이라는 게 아직도 Vector를 기반으로 해서 implement가 되고 있습니다
그래서 ArrayList 와 벡터는 order와 duplication 다 가지고 있고
이 ArrayList와 Vector는 둘 다 array를 베이스로 하는 그런 List죠
그래서 array를 storage space로 사용한다
즉, ArrayList나 Vector 안에 있는 모든 element들은
연속된 memory공간 안에 존재를 해야 됩니다
이렇게 띄엄띄엄 있는 것이 아니라 연속된 공간 안에 있어서 찾아가기 쉽게 돼 있죠
그래서 ArrayList는 간단하게 보고 갈 텐데요

Page 11

import java.util.ArrayList 고
여기 지금 Collections는 utility class예요
그래서 Collection이 아니라 Collections 거든요
그래서 이 utility class에는 예를 들면 sort 같은
그런 utility가 들어 있기 때문에
우리가 쉽게 사용할 수가 있습니다
지금 example에서는 ArrayList<Integer>를 type parameter로 하는
10개짜리 이 ArrayList를 먼저 만들었구요
list1은 [5 4 2 0 1 3] 이렇게 프린트가 되죠
여기 지금 println에서 list1의 toString은
이렇게 [    ] 가 되어 있는 이런 형식으로 자동으로 프린트를 해줍니다
그래서 ArrayList를 프린트할 때 이렇게 하면 된다는 거고
그 다음에 list2는 list1으로부터 subList(1, 4)를 받아가지고
list2는 [4, 2, 0] 이것만 list2에 들어가게 되죠

Page 12

그 다음에 Collections.sort(list1), Collections.sort(list2)
이렇게 0, 1, 2, 3, 4, 5로 sorting이 되구요.
Collections가 아까 utility class라고 했죠
그래서 여기에 이제 sort가 이 Collections의 static library method입니다
그래서 list1, list2를 sorting하는데 쉽게 사용할 수 있어요
이런 거 몰랐죠 이런 거 있으면 굉장히 쉽게 쓸 수 있었을텐데
그래서 list2는 0, 2, 4 역시 sorting이 됐고요
그 다음에 list1이 list2를 contains all을 하고 있느냐 하고
contains all을 실행하면 0, 2, 4는 0, 1, 2, 3, 4, 5에 완전히 포함되기 때문에
true를 리턴하게 됩니다
이런 식으로 사용하면 되구요

Page 13

그 다음에 ArrayList에서 remove하는 그런
내부적으로 어떤 일이 일어나는지 한번 보도록 하겠습니다
v가 어떤 ArrayList라고 했을 때
거기에 v.remove(2) 즉 index 2를 remove한다
맨 처음에 이렇게 돼 있을 때, 주어진 이 target data를 delete하기 위해서는
이 데이터 뒤에 있는 것들 즉 3을 2로 copy하고 4를 3으로 copy하고
이런 식으로 되겠죠 그래서 이제 2가 3으로 됐고 3이 4가 됐고
4는 그대로 남아있게 되죠
이렇게 뭘 하나 중간에서 삭제를 하면 array기 때문에
이 중간에 비워둬서는 안되죠. 그러니까 이게 전부 이렇게 trimming을 해야 됩니다
바로 밑에서부터 하나씩 이렇게 카피를 계속 해와서
이렇게 채워야 되는 게 생기는 거죠
자 그 다음에 last 데이터가 4로 옮겨졌기 때문에 이건 null로 만드는 거죠
그 다음에 size를 하나 줄여서 최종적으로 이렇게 만들게 됩니다
그래서 최악의 경우에 worst case일 때는
어떤 때가 그 데이터를 제일 많이 옮겨야 될까요, 하나를 삭제할 때?
이 예를 보면 제일 첫 번째 element, data[0]를 삭제하면
그 밑에 있던 걸 다 옮겨야 되죠 이 꽉 차 있다고 생각하면
size - 1 개의 data  size - 1개의 데이터를 옮겨야 됩니다
그래서 결국은 worst time의 time complexity는
Order of n ( O(n) ) 이다 이렇게 볼 수 있습니다
전체 n개 데이터가 있을 때 n-1개 데이터를 움직이게 되니까
n개 데이터를 움직이는 그런 time order를 갖게 되는 거죠
그래서 이거는 뭐 하나를 삭제하는데 n개를 다 움직이는 거니까
그렇게 좋아 보이지 않습니다 그렇지만 이건 할 수 없는 일입니다
array의 성질을 유지하기 위해서 할 수 없이 해야 되는 일이죠

Page 14

이번엔 Array를 첫 element부터 끝 element까지
순서대로 remove하는 거를 한번 보죠
for문으로 i = 0부터 list.size() 보다 작을 때까지
i를 증가시키면서 list.remove(i) 를 했습니다
여기 i 는 이제 index가 들어가게 됩니다
지금 remove 0을 먼저 하면, 여기서 지금 0 1 2 3 4 이렇게 자리가 들어가 있죠
그래서 0번째 있는 것은 0 니까 0을 빼 버리면
얘네들을 하나씩 다 이렇게 카피를 해 줘야 되겠죠
자 1을 하나 땡기고 2를 다시 하나 땡기고
3을 땡기고 4를 땡기고 이런 식으로 1 2 3 4가 됐죠
그래서 copy를 해야 되는 상황이 온다 이제 그런 거구요
여기서 remove(1) 하면, index 1을 remove하라는  거예요
그래서 0 1 2 3 이렇게 인덱스가 되겠죠
그래서 remove(1), 1번 인덱스에는 데이터 2가 들어가 있으니까
2를 remove하면 3을 하나 땡겨주고 4를 하나 땡겨줘서
이런 식으로 카피를 해줘야 됩니다
그 다음에 마지막으로 이제 remove(2)를 하면은
0 1 2니까 4를, 요 경우에는 그냥 4를 그냥 null로 만들어 버리면 되겠네요
자 이런 식으로 앞에서 부터 뒷쪽으로, 0번부터 뒤쪽으로
이렇게 remove를 할 때는
하나씩 copy를 해줘야 되는 그런 상황이 오겠죠
근데 반대로 last object 부터 first object로
즉, i = list.size() - 1, 제일 마지막 index부터 시작해서
i를 감소시키면서 1씩, 0까지 그렇게 하나씩 remove를 하면 어떻게 될까요
자 먼저 remove(4)를 하면 마지막 걸 null로 만들고 끝. 그렇죠?
그 다음에 remove(3) 을 하면은 null로 만들고 끝
이런 식으로 하면은 마지막에 전부 null이 될 수 있겠죠
이 경우에는 이제 하나의 element를 remove 하더라도
다른 걸 땡겨 주거나 copy해 줄 필요가 없겠죠
그래서 이 Array일 경우에는 이런 식으로
앞쪽에서 부터 remove를 해 주느냐
아니면 뒤쪽에서 부터 remove를 해주느냐에 따라서
아주 작은 차이지만 계산 시간에 차이가 있을 수 있다라는 것을 보여주고 있습니다

Page 15

그래서 ArrayList의 장단점을 한번 보면
장점은 굉장히 간단한 structure를 가지고 있다 라는 것이고요
그 다음에 fast direct access time을 가지고 있다
즉, 몇 번째 데이터를 찾아갈 때, 그것이 바로 한 번에 액세스가 가능해요
그거는 왜 그러냐면 이 데이터를 가지고 있는 이 Array의 특징인데
데이터를 가지고 있는 이 메모리가 전부 붙어 있기 때문에 그렇습니다
그래서 주소 계산이 쉬워지는 거죠
만약에 list.get(index) 가 주어졌다면
이 index element가 어디 있는지를 찾아갈 때는
list[index]의 address는 어떻게 돼요?
list[0]의 address에다가 sizeof(data) 곱하기 인덱스를 하면 되겠죠
그렇게 되면 쉽게 찾아갈 수 있겠죠
그래서direct access 가 굉장히 빠르다
그런데 단점이 또 있죠.
만약에 우리가 열개짜리 element를 가진 ArrayList 를 해놨는데
중간에 add, add, add 해가지고 열개 이상이 add가 되게 된다
그러면 내부적으로 어떤 일이 일어날까요?
이 ArrayList는 메모리가 전부 붙어 있어야 됩니다 그쵸 처음부터 끝까지
그러니까 지금 현재 할당된 Array를 버리고
이거보다 더 큰 Array를 새로 잡아서
거기다 다 기존의 element들을 옮겨 줘야 돼요 카피를 해야 돼요
왜냐하면 스페이스를 큰 걸 잡아야 되니까요
마치 식구가 많아지면 방이 여러 개인 큰 집을 구해야 되고
이사를 해야 되잖아요
그거하고 똑같은 거죠
그래서 그 capacity를 바꾸기 위해서는
새로운 memory space를 만들어야 되고
그 다음에 데이터를 old space에서 new one 으로 카피를 해야 된다
만약에 그래서 이 옮기는 시간이 또 걸리기 때문에
그래서 그게 싫어서 아예 처음부터 크게 메모리를 잡아 버리면
실제로 쓰는 것보다 버려지는 메모리가 훨씬 더 많을 수 있다는
얘기가 되겠습니다 waste 된다 라는 얘기가 되겠습니다
그래서 어느 쪽이나 작게 잡을 수도 없고 너무 크게 잡을 수도 없고
그래서 그런 단점이 있는 거죠
그 다음에 그 sequence 데이터를 add하거나 delete할 때
시간이 많이 걸릴 수 있다는 거죠
아까 우리가 이 전번에 슬라이드에 봤듯이
맨 첫번째에서 데이터를 삭제하거나 아니면 끼워 넣을 때
끼워 넣을 때도 마찬가지로 데이터를 다 옮겨야 되죠
그럴 때는 시간이 많이 걸릴 수 있다는 거죠
중간이나 첫 부분에, 그렇죠? 그래서 그럴 때 시간이 많이 걸릴 수 있다
그렇지만 그 맨 마지막 부분에서 데이터를 add하거나
삭제하는 것은 좀 시간이 덜 걸린다 라는 얘기가 되겠습니다
자 그래서 이러한 그 ArrayList 의 장단점
일반적인 array의 장단점과 같습니다

Page 16

그 다음에 그 ArrayList와 Vector는 같은 부류고
LinkedList는 List의 또 다른 implementation이죠
그래서 이것도 역시 List 이기 때문에
order와 duplication 유지가 되고요

Page 17

그래서 LinkedList 보면  컨텐트가 있고
그 다음에 이 뒤에는 link field가 있었죠
link field는 다음 node의 address를 가지고 있죠
그래서 이렇게 주소를 가지고 있다는 것은
바로 이렇게 얘를 이렇게 포인팅 하고 있다 라는 것과 같은 뜻이 되죠
그 다음에 그 다음 node로 가보니까 3600에 가보니까 3이 들어있고 데이터로.
그 다음에 다음 node는 4000번째에 들어있고
그래서 4000번째 가보니까 17이 들어있고 이런 식으로
그리고 맨 끝에는 이제 그 list의 끝을 나타내기 위해서
null을 가지고 있고요 link에.
그 다음에 head가 있어서 head는 맨 첫 번째 node의 주소를 가지게 있게 되죠
그래서 LinkedList 는 사실 다음 node의 주소를 가지고 있기 때문에
얘네들이 꼭 이렇게 physical 하게 붙어 있는 메모리에 있지 않아도 된다는
장점이 있습니다
왜냐하면 다음 데이터를 이렇게 실제로 데이터가 있는 곳에
위치를 다 가지고 있기 때문에 가능한 얘기죠 그게

Page 18

그래서 LinkedList는 그 얘기가 바로 나오는데요 array와는 달리
LinkedList는 데이터가 discontinuous 하게 있어도 된다라는 거죠
continuous 하게 있지 않아도 된다라는 얘기죠
그래서 array일 경우에는 이렇게 100번째 위치에 시작 위치가 있다고 하면
이렇게 그다음 이 데이터들이 이렇게 쭉 계속해서 연달아서 붙어 있어야 돼요
일정한 size로. 그렇게 해야만 우리가 인덱스를 딱 지정했을 때
쉽게 찾아갈 수 있는 거잖아요
근데 LinkedList일 경우에는 이렇게 다음 node의 주소를 가지고 있기 때문에 link에
그래서 꼭 이렇게 붙어 있을 필요는 없다는 거죠
그래서 사방으로 왔다 갔다 하는 것도 가능합니다 메모리 안에서
메모리를 더 효율적으로 쓸 수 있고 또 여러 가지 장점이 있게 됩니다
만약에 중간에 이 2를 가지고 있는 이 node를 삭제하고 싶다라고 하면
그 앞에 있는 node의 link 필드를
뒤쪽 현재 그 삭제하려는 node의 link로 바꿔주면 되죠
그럼 얘를 pass해서 그냥 이렇게 하나 건너뛴 얘를 가리키게 되니까
중간에 얘는 자동적으로 삭제가 되는 겁니다 그쵸
그래서 garbage collector에 의해서 모여져서
다른 곳에 사용되게 된다 라고 얘기를 했죠
자 그 다음에 insert data는 하나의 데이터를 크리에이트하고 그 다음에 reference를
몇 번 바꿔주면 된다 라고 했습니다
자 그래서 여기 지금 0, 1, 2, 3이 들어가 있는
이런 list에 4라는 거를 만들어서 1 다음에 끼워 넣고 싶어요. 여기 1과 2 사이에
그러면 여기 4라는 걸 새로 node를 만든 다음에 그 다음에
그 2의 전번 node에 있는 이 link를 새 node를 가리키게 하고
그 다음에 새 node의 link가 그 2번 node를 가리키게 하면 되겠죠
그래서 이런 식으로 하면 쉽게 Implement를 할 수 있겠습니다

Page 19

자, 그 다음에 LinkedList type에 대해서 좀 알아보겠는데요
LinkedList 일반 이게 지금 가장 단순한 Simple
LinkedList인데 이런 식으로 Node가 돼 있죠 Node의 Next,
Next 또는 우리는 Link라고 이름을 가지고 있었죠
이거는 다음 node의 주소를 가지고 있는 거고 Object obj는 데이터 필드라서
여기에 그 오브젝트를 가져도 되고 아니면
얘가 제너릭으로 어떤 타입 파라미터를 가지고 해서
타입 파라미터를 가지고 있게 해도 되죠
T 타입을 가지고 있게 해도 되죠
그런 식으로 해서 이 next 하나만 갖고 있기 때문에
link 하나만 갖고 있기 때문에
이렇게 다음 번 node만 이렇게 포인팅 하게 되어 있습니다
자 근데 Doubly Linked List는 link를 하나씩 더 가지고 있어요
즉 next 하고 previous.
next는 다음 번 node를 가리키고 있고
previous는 뭐를 가리키고 있어요 자기의 전번 걸 가지고 있는 거죠 이런 식으로
그래서 next와 previous를 다 가지고 있기 때문에
이게 훨씬 더 코딩 하기는 쉽습니다
그러니까 그 뒤쪽 node에서 앞쪽 node를 액세스 하는게 가능하죠
그래서 이런 걸 doubly linked list라고 하고요
우리는 여기에 대해서 공부는 지금 뭐 따로 안하지만 여기서
이렇게 implement할 수도 있다라는 거고요 그 다음에
doubly circular linked list는 어때요 쭉쭉쭉쭉 가서
맨 끝에 있는 게 다시 첫 번째 걸 가리키게 되는 거죠
그리고 또 previous는 쭉쭉 와서 이 previous가
첫 번째에선 previous가 더 이상 갈 데가 없기 때문에
null이었는데 여기서는 맨 끝에 걸 가리키게 하는 거죠
이렇게 하면은 next를 통해서도 한 바퀴를 쭉 돌 수 있고
그 다음에 다시 원점으로 돌아올 수 있고 previous 를 통해서도
뒤에서부터 한 바퀴 돌고 다시 맨 뒤로 돌아올 수 있고요
그렇죠? 그런 장점이 있죠
이런 걸 이렇게 계속 연결되어 있는 이런 형태를
Circular Linked List라고 합니다

Page 20

Linked List<String> 이렇게 하면 이제 String 타입을 가지게 되는데
그 타입 파라미터로 new 해서 하나 만들었구요
그 다음에 처음에 A B
C 자 A B 를 add 하면은 A 가 들어가고 그 다음에 list
add B 를 하면은 A 뒤에 B 가 들어가게 되죠 그 다음에 add
rest C 하면은 add rest 도 마찬가지로 add 랑 마찬가지예요
그래서 맨 끝에 집어 넣는 거죠 A B C add first 하게 되면
제일 먼저 앞쪽에 집어넣게 되죠 DABC 그 다음에 add 하게 되면은
2번에 2번 인덱스에 2를 넣으라 했으니까 0, 1, 2
여기 들어가게 되니까 얘는 A하고 B 사이에 여기 2를 끼워 넣게 되죠
그래서 이런 식으로 add를 하게 되고
remove는 직접 B를 찾아서
여기 있는 B를 찾아서 remove하는 방법 그 다음에
인덱스에서 remove하는 방법 0, 1, 2, 3, 0, 1, 2,
3 이었으니까 3번에 C가 있었죠 그리고 C가 날아가는 거고요
remove first는 D를 날리는 거고 remove
last는 맨 끝에 있는 걸 날리는 거고
이런 식으로 사용을 하면 되겠습니다

Page 21

두 번째 예에서는 스트링에
이것도 역시 스트링, 여기 지금 스트링 빠졌는데요 이건 에러는 안 나는데
여기 넣는 게 좋겠습니다 <String> 이라고
그 ll 에다가 Geeks 라는 걸 넣으면 [Geeks],
그 다음에 Heeks 를 넣으면 [Geeks, Heeks]
그 다음에 1번에다 Jeeks 를 넣으라 그러면
0, 1이니까 Heeks가 뒤쪽으로 가야 되겠죠
그래서 [Geeks, Jeeks, Heeks] 이렇게 되고요
그 다음에 ll.set(1, for) 하면 set은 뭐냐면
이거 새 node를 만드는 것이 아니라 데이터를 바꾸는 겁니다
그래서 1번 index의 Jeeks를 for로 바꾸는 거죠
[Geeks, for, Heeks] 이렇게 세팅을 하게 됩니다

Page 22

자, 그 다음 3번 3번 example, 이거는 Geeks, Geeks를 add 하고
중복을 허락하기 때문에 둘 다 들어가죠
그 다음에 1번에다가 for 를 넣었죠
네, 그렇게 되면은 Geeks, Geeks 있다가 1번에다 for 를 넣으니까
Geeks 두 개 사이에 for 가 들어가죠
그래서 프린트를 하면은 [Geeks for Geeks] 가 프린트 되고요
자 요거는 size까지 따라가면서 ll.get(i) 을 해서 프린트를 하게 한 건데
뭐 ll을 직접 println으로 바로 쏴 줘도 되지만
여기서는 지금 size까지 이렇게 한 바퀴를 돌 때
인덱스를 통해서 이렇게 액세스 하는 것도 가능하다는 걸
보여주기 위해서 이렇게 한 거구요
그 다음에 요거는 똑같이 for문을 쓸 때도 str : ll
이렇게 하면은 ll 안에 들어있는 모든 스트링에 대해서
이렇게 프린트하는 것도 가능하다는, 이제 for each loop라고 했죠
이렇게 쓰는 것도 가능하다는 얘기가 되겠습니다

Page 23

자 그래서 LinkedList 를 봤는데 이게 이제 앞에 List
interface 에 있는 method에다가 더 추가된 그런 것들입니다
그래서 addFirst, addRest, clear, clone,
element, element는 뭐냐면, 그 첫 번째 element
LinkedList의 첫 번째 first element를 가져옵니다
return하지만 remove 하진 않는다 라는 거고요
사실 이 element는 peek 하고 똑같습니다 하는 일이.
그 다음에 get first는 첫 번째 element를 return하는 get first하고도 똑같은 거죠
그 다음에 get last는 맨 마지막 element를 return하게 되었고요
그 다음에 lastIndexOf(Object o) 는
Object o가 존재하는 가장 마지막 인덱스
만약에 없을 경우에는 - 1 return하게 되겠구요. 
offer는 tail에다가 집어넣는 겁니다
addRest하고 같은 일을 하는데 여기서 boolean을 return하게 되죠
그 다음에 offer가 있고 offerFirst가 있고 offerLast가 있고
그래서 offer라는 건 이제 insert하고 같은 의미죠
add하고 같은 의미고요
다음에 peek, peekFirst, peekLast는 마찬가지로 읽어오기만 하는데
remove 하지는 않습니다
poll 은 뭐냐면 head에서 하나를 읽어오고
그것을 return하고 그것을 remove를 하게 돼요 
그래서 여기서 중요한 것은
offer 그 다음에 peek, poll 뭐 이런 것들이 되겠습니다

Page 24

ArrayList와  LinkedList의 차이에 대해서
어떤 수행 시간의 차이에 대해서 좀 보여주고 있는데요
여기서 지금 이 위에는 지금 ArrayList고요
그 다음에 밑에는 LinkedList입니다 자, 그래서
하나씩 element가 있는지 없는지 볼 때 
Worst Case Time은 Array나 아니면 LinkedList에서 
둘 다 n-1개씩 걸립니다 
즉, 어떤 element가 이 안에 있는지를 살펴보기 위해서
sorting 안 된 상태라고 보면요 전부 다 끝까지 다 봐야 되죠
그래서 계속해서 움직여서 n-1개는 다 봐야 된다라는 얘기가 되겠고요
그 다음에 tail에다가 element 하나 추가할 때 ArraylLst는
어때요 size만 여기다 넣어주고 size만 변경시키면 된다 그랬으니까
어떤 constant 뭐 1이라고 볼 수도 있고
1, 2 이런 거는 다 constant로 보니까요
constant C라고 볼 수 있고
worst case의 linked list는 어떻게 돼요?
맨 끝에 하나 추가할 때는 일단 얘네들을 다 거쳐서
가서 tail까지 가야 되죠 tail까지 가는 시간만 n-1 입니다
그래서 n-1를 먼저 다 액세스하고 그 다음에 여기서 뭘 하나 더 추가해야 되죠
자, 그 다음에 add an element at the head
head에다 추가할 때 이때는 느낌이 오지만
LinkedList 가 훨씬 유리합니다
LinkedList 는 새 node를 만들고
link만 두 개 딱 바꿔주면 되거든요 근데 ArrayList 일 때는 어때요
아까 얘기한 대로 자 arr[0] 를 여기다가
여기다 하나 추가를 하려면 얘네들을 다 이렇게 한 칸씩 다 옮겨야 되죠
그래서 move 하는게 몇 번 걸리냐면 n-1번 최악의 경우에
그래서 이때는 이제 LinkedList가 훨씬 Constant Time으로 유리합니다
그 다음에 Element를 찾고 Remove할 때
이것도 역시 찾는 시간이 걸리기 때문에 n-1개, LinkedList도 n-1번
그  다음에 Tail에서 Remove를 할 때
Tail에서 Remove할 때 무조건
그 ArrayList는 Tail에서 하는 거는 쉬워요 그쵸? 네, 한두 번 가지고 끝나고
얘는 일단 tail에서 뭘 하는 거는 일단 찾아가야 되기 때문에
일단 n-1은 기본으로 걸립니다 LinkedList 는 그렇게 되고요
그 다음에 head에서 뭘 할 때는 무조건 LinkedList 가 더 유리하죠
그래서 이쪽은 link만 두 번 바꿔 주면 되고 얘는 일단 remove 하니까
얘네들을 다 또 옮겨서 앞쪽으로 옮겨야 되죠 그래서 최악의 n-1이 걸리고
I 번째 element access 할 때 이거는 기본적으로 array의 장점입니다
그래서 한 번에 찾아가죠 그런데 LinkedList 일 경우에는 어떻게 돼요?
최악의 경우 I가 끝번일 때는 n-1개가 걸리는 거죠
그래서 이런 식으로 어떤 데이터의 특성에 따라서
내가 어떤 operation 을 많이 하느냐에 따라서
ArrayList 를 선택할 거냐 아니면 LinkedList 를 선택할 거냐 이거를
우리가 결정을 해야 되겠죠
그래서 application을 딱 보고
여기서 주로 하는 operation이 어떤 operation이다
중간에 있는 거를 많이 insert했다가 다시 delete하고
이런 일들이 많이 일어난다 라고 하면은
무조건 LinkedList 를 해야 되겠죠
왜냐하면 ArrayList 를 사용하면
예를 들면 천만 명 인구 중간에서 한 명을 삭제한다
굉장히 힘든 거죠 array에서는
중간에서 삭제하면 계속해서 copy를 해야 되기 때문에
그래서 어떤 data structure 를 사용할지에 대해서
잘 우리가 생각을 해봐야 된다라는 얘기가 되겠습니다



