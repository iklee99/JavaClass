Let's start with Collection. The Collection

Framework is a standardized set of classes

for storing

various data groups

There are various interfaces

The square ones are interfaces,

and the circles here are classes

They provide an easy way to store

and access multiple data

If you look here, Collection is actually a child of an interface called Iteratable

Next, under collection, there are interfaces such as List, Queue, and Set,

and then, separately from these,

there is another interface called Map

Map does not belong to this Collection,

but it is treated together with Collection

because it plays a similar role

Also, under List, there are things like Vector,

ArrayList, and LinkedList, and under Queue, there are things like Deque and PriorityQueue

Then Stack is implemented as Vector and it is like this

In this course, we will only cover this part,

that is, List and Queue, excluding Set and Map

First, let's talk about the differences

between the core interfaces of the Collection Framework

The List Interface is an ordered set of data

Having an order does not mean that it is sorted

when it is entered,

but that the order in which the data is entered is maintained

The order is maintained, and then duplicate data is allowed

So, the same data can be entered multiple times

It's like a waiting list

Since there may be multiple people with the same name, duplicates should be allowed,

and then the waiting list should be recorded in the order of arrival

So, the order is maintained

So, the classes inside this would be ArrayList,

LinkedList, Stack, Vector, etc

Next is a set. We won't go into detail about a set here,

but if you look at its characteristics,

there is no order

So the order in which it was inserted is not maintained

So, you can put some data into the collection

and then take it out,

but the order is not maintained

That means it's not maintained how many times it came in

And that means it doesn't allow duplicate data

So it's a set of 4-legged animals, that is, a set of animals with 4 legs

Then, things like dog, cat, bear, lion would be included

So these things shouldn't be duplicates

So, we can see that this is the definition of set now,

and there are classes like HashSet, TreeSet, etc

A map is a data structure made up of tuples

So one data item is paired like this

key and value. So the order is not maintained,

and the key cannot be duplicated,

but the value allows duplication

For example, something like a postal code is like this: area number,

which is the area key, and the number is the value

So, the postal code for Seoul is like this,

and the local phone number is like this: area number, Seoul

02, San 051, etc

So, examples of classes include HashMap,

TreeMap, HashTable, Properties, etc

Among them, we will focus on List

and learn a little about Queue,

which is similar to it

So, the interface Collection has several methods in common

Because they may now change a little bit

depending on the child interface or child class,

but they have these things in common

These collections are all generic

They are generic interfaces,

so they are supposed to go with this collection and then 

So, the class that we put in this generic will now be add

addAll gives me a Collection here

So, it will put all the elements

in another Collection at once

Next, clear is to completely delete all data, and contains

is a boolean true

if the given Object o exists, otherwise false

contains all is true if the given collection is all

in it, otherwise false

Equals is true if the Object o is in the collection, right?

Yes, hashCode is also defined in the Object class,

so it is actually one of the general classes

that all classes inherit

Like toString or equals, then isEmpty returns true if it is empty,

otherwise it returns false

An iterator is something that can be used to travel

all the elements in a collection,

and it is of the type called iterator

This iterator will be a bit different later on,

and then remove will remove the given object,

and then removeAll will remove everything

in the Collection

Then retainAll keeps only the items that are in the given collection

and deletes everything else

In other words, you can think of it

as finding the intersection between the collection that called retain all and the given collection

Next, size returns the number of data in the collection,

and toArray is a method that turns all elements in the collection

into an array of general objects,

that is, an array of the type that belongs to the collection

Next is the List interface

As I mentioned earlier, the List interface allows both order and duplication

So, it maintains the order in which data arrives in the list,

that is, the order in which it was added, and then allows duplication

So List is here, it will be an interface under Collection

The methods of List are almost the same

as those of its parent Collection

So there's adds, addAll, clear, contains, containsAll,

copyOf, then equals,

Then there is get. Get will now return the element

that is at a specific index

The reason indexing is possible here is because it is a List

List knows which index it has

because it maintains the order

But things like set or map

don't maintain the order,

so they can't have this get method

Then hashcode. Then indexof. This is object

This is also possible because the List maintains the order

isEmpty(), iterator().lastIndexOf(Object o) can contain multiple

o's

There may be multiple duplicates,

but the last index, the index at the very end, is returned

Then remove, this removes the object at the index

Then, you directly give the remove object and remove it

Next, removeAllCollection removes everything

in the collection,

retainAll deletes

everything except what is in the collection, set sets

an element at a specific index,

and size is size and sort

Since we have sort directly,

sorting is possible by that relationship through a given Comparator

Next, the sublist is given two indices

and the items in it are returned as a list

Next, toArray will create a general array and return it

So, under List, there is Vector and ArrayList,

and then LinkedList

Vector is similar to ArrayList,

but it is a bit old and is rarely used,

but Stack is still implemented based on Vector

So, ArrayList and Vector have both order and duplication,

and both ArrayList and Vector are lists based on array

So we use array as storage space

That is, all elements in an ArrayList

or Vector must exist in a contiguous memory space

They are not scattered like this, but are in a continuous space, making them easy to find

So, let's take a quick look at ArrayList

import java.util.ArrayList and here,

Collections is a utility class

So it's Collections, not Collection

So this utility class contains utilities

like sort, for example,

so we can use them easily

In the current example,

we first created a 10-item ArrayList with ArrayList

as the type parameter, and list1 is printed as [5 4 2 0 1 3]

Here, in println, toString of list1

is automatically printed in this format, [ ]

So, when printing ArrayList, you can do this

Then, list2 receives subList(1, 4) from list1,

and only [4, 2, 0] is entered into list2

Then Collections.sort(list1), Collections.sort(list2)

It's sorted like this: 0, 1, 2, 3, 4, 5

I said earlier that Collections is a utility class

So here now sort is a static library method of this Collections

So, you can easily use it to sort list1 and list2

I didn't know about this. If I had something like this, it would have been really easy to use

So list2 is also sorted as 0, 2, 4

Then, if you check whether list1 contains all of list2

and execute contains all, it will return true

because 0, 2, 4 are completely included in 0, 1, 2, 3, 4, 5

You can use it like this

Next, let's take a look at what happens internally

when removing from an ArrayList

When v is an ArrayList,

v.remove(2) removes index 2

When it's like this at the very beginning,

in order to delete the given target data,

you have to copy the things behind this data, that is, 3 to 2, and 4 to 3, and so on

So now 2 becomes 3, 3 becomes 4, and 4 remains as it is

If you delete something in the middle like this, it can't be left empty because it's an array

So, you have to trim it all like this

You have to keep copying like this from the bottom, one by one,

and then you end up with something that needs to be filled in like this

So then the last data is moved to 4, so we make it null

Then, we reduce the size by one and make it like this in the end

So in the worst case, when do

we have to move the most data? When deleting one? In this example,

if we delete the very first element,

data[0], we have to move everything below it

If we think it's full, we have to move size - 1 data, size - 1 data

So, in the end, we can see that the worst time time

complexity is Order of n (O(n))

When there are n data in total, n-1 data are moved,

so we have a time order that moves n data

So this is like moving n things to delete one thing

It doesn't look that good, but this is something that can't be done

This is something that has to be done to maintain the nature of the array

This time, let's take a look at removing the array in order

from the first element to the last element

Using a for loop, we increased

i from i = 0 until it was smaller than list.size() and used list.remove(i)

Here i will now be the index

If we do remove 0 first, the spaces 0 1 2 3 4 will be entered here

So, since the 0th one is 0, if we remove 0,

we have to copy them one by one like this

Okay, so I pulled 1, then pulled 2,

then pulled 3, then pulled 4, and so on, it became 1 2 3 4

So now there comes a situation where you have to copy

If you do remove(1) here, it means to remove index 1

So the index would be 0 1 2 3

So, remove(1), since data 2 is in index 1, if you remove 2,

you have to move 3 by one and then move 4 by one,

and copy it like this

Then finally, if you do remove(2), it will be 0 1 2, so 4

In this case, you can just make 4 null

So, when you remove from the front to the back,

from 0 to the back, there

will be a situation where you have to copy them one by one

But what happens if you remove them one by one,

starting from the last object to the first object, that is,

i = list.size() - 1, starting from the last index and decreasing i by 1, until 0?

Okay, if we do remove(4) first, it will make the last one null and that's it. Right?

Then, if you do remove(3), it will be made null and you're done

If you do it this way, everything can be null at the end

In this case, even if you remove one element,

you don't need to pull or copy another one

So, in this case of Array,

it shows that there can be a difference in calculation time

depending on whether you remove from the front or the back,

although it is a very small difference

So, if we look at the pros and cons of ArrayList,

the pro is that it has a very simple structure

Then it has fast direct access time

That is, when you go to find some data, it is accessible at once

The reason is that it is a characteristic of this array

that holds this data, because all of the memory that holds the data is attached

So address calculation becomes easier

If list.get(index) is given,

how do you find the address of list[index]

when looking for where this index element is?

You can multiply the address of list[0] by sizeof(data) and the index

Then it will be easy to find

So direct access is very fast

But there is another downside

If we have an ArrayList with ten elements,

and we add, add, add in the middle, more than ten elements will be added

So what happens internally?

This ArrayList has to have all the memory attached, right? From beginning to end

So, we need to discard the currently allocated Array

and create a new Array that is larger than this one

and move all the existing elements to it. We need to copy it

Because we need to grab a big space

As the family grows, you need to find a bigger house

with more rooms and move

It's the same thing

So, in order to change the capacity,

a new memory space must be created,

and then the data must be copied from the old space to the new one

If so, it will take more time to move

So, if you don't like that and just grab a large amount of memory from the beginning,

you could end up wasting much more memory than you actually use

That means it's called waste

So, you can't make it too small or too big,

so that's the downside

Then, when you add or delete that sequence data,

it can take a lot of time

As we saw in the previous slide,

when you delete data from the very beginning or insert it,

you also have to move all the data

In that case, it can take a lot of time

In the middle or the beginning, right? So that can take a lot of time

But the point is that adding or deleting data at the very end

takes a little less time

So these pros and cons of ArrayList are the same as the pros

and cons of a general array

Then, arraylist and vector are the same type,

and LinkedList is another implementation of List

So, since this is also a list,

order and duplication are maintained

So if you look at LinkedList,

there is content, and then after that there is a link field

The link field has the address of the next node

So having an address like

this means that it is pointing to this thing like this

Then I went to the next node and there was 3600 and there was 3 as data

Then the next node was 4000th

So when we go to the 4000th node, there is 17 in it,

and at the very end, there is null

to indicate the end of the list, and in the link

Then there is the head, and the head has the address of the very first node

So, LinkedList actually has the advantage that

since it has the address of the next node,

they don't necessarily have to be physically attached to the memory

Because the following data actually

has the location of the data, that's possible

So, LinkedList is right here

Unlike array, LinkedList allows data to be discontinuous

It doesn't have to be continuous

So, in the case of an array, if the starting position is at the 100th position,

then the data should be connected in a row like this

With a fixed size. That way,

we can easily find it when we specify the index

But in the case of LinkedList, since it has the address of the next node,

it doesn't necessarily have to be attached to the link like this

So it is possible to go back and forth in memory,

and it allows for more efficient use of memory, and it has many other advantages

If you want to delete this node that has this 2 in the middle,

you can change the link field of the node in front of it

to the link of the node you want to delete

So, if you pass this and it just points to the one that was skipped,

this one in the middle will be automatically deleted, right?

So, I said that it will be collected by the garbage collector

and used somewhere else

So then, insert data is said to create one data

and then change the reference several times

So, I want to create a 4 in this list that currently contains 0, 1, 2,

3 and insert it after 1

So, between 1 and 2, I create a new node called 4,

and then I make the link in the previous node of 2 point to the new node,

and then I make the link of the new node point to node 2

So, if you do it this way, you can easily implement it

Okay, next, let's learn about the LinkedList type

LinkedList in general

This is the simplest Simple LinkedList. It has Nodes like this

Node's Next, Next, or we named it Link

This has the address of the next node, and Object is obj, which is a data field

You can either have that object here,

or you can make it generic and have some type parameters,

so it has type parameters

You can have T type

In that way, since it only has this next,

it only has this link,

so it points to only the next node like this

Well, a doubly linked list has one more link

That is, next and previous

Next points to the next node, and previous points to something

It has its previous node

So, because it has both next and previous,

this is much easier to code

So, it is possible to access the front node from the back node

So this is called a doubly linked list

We're not studying this separately right now,

but you can implement it like this

And then what about a doubly circular linked list?

It goes all the way up and down, and the last one points back to the first one

And also, previous keeps coming up, so this previous

In the first case, previous was null because there was nowhere else to go,

but here it points to the very end

In this way, you can go around once through next

and then return to the starting point,

and you can go around once through previous and then return to the end

Right? There are advantages to that

This type of continuously connected thing is called

a Circular Linked List

Linked List If you do this, you will now have a String type,

and you will create one

by using new as the type parameter

Then, if you add A B C, A B will go in, and if you do list

add B, B will go in after A

Then, if you do add rest C, add rest is the same as add

So, we put it at the very end

If we do A B C add first, it will be put at the very front

DABC Then, if we do add, we are told to put 2 in the 2nd index, so it is 0, 1, 2

Since it goes in here, it inserts 2 here between A and B

So, add is done like this,

and remove is a method of finding B directly,

finding the B here, and removing it

Then, a method of removing from the index. It was 0, 1, 2, 3, 0, 1, 2, 3,

so there was C in number 3, and C is blown away

Remove first is blowing away

D, and remove last is blowing away the last one

You can use it like this

In the second example, this is also a string, here

the string is missing, this does not cause an error,

but it would be better to put it here 

If you add Geeks to ll, it becomes [Geeks],

Then if you put Heeks in it, it's [Geeks, Heeks]

Then put Jeeks at number 1

Since it's 0 and 1, Heeks should go to the back

So it becomes [Geeks, Jeeks, Heeks]

Then, if you do ll.set(1, for), what is set?

This does not create a new node, but changes the data

So, we change the Jeeks of index

1 to for [Geeks, for, Heeks] and set it like this

Okay, then number 3, number 3 example,

this is Geeks, Geeks is added and allows duplication, so both are included

Then I added for to number 1

Yes, in that case, there are Geeks,

Geeks, and then for is added to number 1, so for is added between the two Geeks

So when you print it, [Geeks for Geeks] is printed

This is done by following the size and printing it

by doing ll.get(i)

You could have just sent ll directly with println,

but I did this to show that it is also possible to access it

through the index when going around the size

Next, this is the same as using a for loop, so if you do str: ll,

it is possible to print all the strings in ll like this

Now, it is called a for each loop

This means that it is also possible to write it like this

So, I looked at LinkedList, and this is just the methods that are already

in the List interface, plus some more

So what addFirst, addRest, clear,

clone, element, element means is,

it gets the first element of the LinkedList and returns it,

but it doesn't remove it

In fact, this element does the same thing as peek

Then get first is the same as get first which returns the first element

Then get last returns the very last element

Then lastIndexOf(Object o) is the last index

where Object o exists

If there is none, -1 will be returned

The offer is put in the tail

It does the same thing as addRest, but it returns a boolean here

Then there is offer, and there is offerFirst,

and there is offerLast, so offer is now the same as insert

It has the same meaning as add

Next, peek, peekFirst, and peekLast only read

but do not remove

What poll does is, it reads one thing from the head,

returns it, and removes it

So the important thing here is offer,

followed by peek, poll, and so on

Here is a comparison of the difference

between ArrayList and LinkedList

and the difference in execution time

Here, the top is ArrayList and the bottom is LinkedList

So, when checking whether there is an element one by one,

the worst case time is n-1 for both Array and LinkedList

In other words, in order to check whether there is an element in this,

if it is not sorted,

you have to look at all of them until the end

So, what this means is that we have to keep moving and see all n-1

Then, when adding an element to the tail, how about ArraylLst?

Just put the size here and change the size

So, you can see it as some constant, like 1, or since 1,

2 are all considered constants,

you can see it as constant C

And what about the worst case linked list?

When adding one at the very end, you have to go through all of them first and get to the tail

The time it takes to get to the tail is n-1

So we need to access all n-1 first and then add one more thing here

Now, when you add an element at the head, this time

you get the feeling that LinkedList is much more advantageous

With LinkedList, you just need to create a new node

and change two links

But what about ArrayList? As I said before,

if you want to add one here, arr[0] here,

you have to move them all one by one

So, how many times does it take to move? In the worst case, it is n-1 times

So in this case, LinkedList is much more advantageous in Constant Time

Then, when searching for an element and removing it, it also takes time to find it,

so it takes n-1 times, and LinkedList also takes n-1 times

Then, when you do Remove from Tail, when you do Remove from Tail,

it is easy to do it from Tail of ArrayList, right? Yes,

you do it once or twice,

and since you have to find what you are doing from Tail,

n-1 is the default. LinkedList is like that

Then, whenever you do something in the head, LinkedList is definitely more advantageous

So, you only need to change the link twice on this side, and remove this one first

You have to move them all again and move them to the front, so the worst case is n-1,

and when you access the Ith element, this is basically the advantage of an array

So let's find them all at once. But what happens if it's a LinkedList?

In the worst case, when I is the last, it takes n-1

So, we have to decide whether to choose ArrayList or LinkedList

depending on the characteristics of the data

and the operations

we perform frequently

So, if you look at the application,

what operations are mainly performed here?

If you insert a lot of things in the middle and then delete them again

and things like that happen

a lot, you definitely have to use LinkedList

Because using ArrayList, for example,

you can delete one person from a population of ten million

It's very difficult. In an array,

if you delete something in the middle,

you have to keep copying it

So, we have to think carefully about which data structure to use