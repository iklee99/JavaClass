I will lecture on Package and Access Modifier

Page 2 A package

is a collection of classes, and classes

included in the same package

are in the same folder

Classes with the same name cannot exist within a package

Therefore, if you group them into packages,

even if there are classes with the same name

that belong to different packages,

they can be distinguished by the package name

The class name that considers the package name

is expanded to parent_package.child_package.class_name,

so they can be distinguished

In this example, MyClass is contained in the com.company1 package,

and YourClass is contained in the com.company2 package

Page 3

If you want a Java class to be included in a specific package,

there must be a Java source file,

for example, MyClass.java, in a child package folder

under a parent package folder

under a src folder under the project folder

The top line of a Java source

file must contain the keyword ‘package’

followed by the package name, for example, com.company

That is, the top line of all Java source

files belonging to the same package must contain the package name it belongs to

Page 4

So, let's look at

how to create a new package in IntelliJ IDEA

and create a new class source file in that package

In the file navigator, right-click on the src folder under the project

name to pop up the menu,

select New, Package in order,

and enter the package name in the pop-up that appears

Here, com.company1 is written as the package

name. Page 5

Right click on the newly created package

name to open the menu and select New

> Java Class to create a new class

Page 6

Here we created a class called MyClass

under the com.company1 package

Page 7

When you want to use a class

that does not belong to the same package, use the import statement

If you want to import all classes

belonging to com.company1,

you can do import com.company1.*,

and if you want to import only one specific class,

you can import only one class,

for example, import com.company2.YourClass

Let's look at the PackageTest.java program

on page 8

There are MyClass

and Product classes in the com.company1

package, and YourClass

and Product classes in the com.company2 package

Here you can see that

both packages contain a class called Product

At first, I imported

all the classes of com.company1 and com.company2

In the main method of the PackageTest class,

I first created mClass,

an object of MyClass, and yClass, an object of YourClass

Now, I want to create one object of the Product class

in each different package,

but since the Product class names are the same,

I have to write the full path of the package

Page 9

However, until now, when defining a class,

we mostly just defined it without specifying the package

to which the class belongs

If we don't specify the package to which a class belongs,

then which package will this class belong to?

The answer is default package

The default package refers to the src folder,

not under any other sub folder

Looking at an example of this class structure,

there are MyClass and Product under the com.company1 package,

YourClass and Product under the com.company2 package,

and ClassInDefaultPackage1, ClassInDefaultPackage2,

and PackageTest classes

in the src folder,

not under com, and these three classes belong to the default package

Page 10 Let's learn

about some of the most commonly used

built-in packages provided by Java

First, java.lang contains the most basic classes

The java.lang package is imported by default even if you do not import it

Representative classes include Object,

String, Math, System, and Thread

The java.util package contains data structures and utility classes

There are classes such as Scanner, ArrayList, HashMap, Date,

Calendar, and Collections

The java.io package consists of classes that provide input

and output functionality

It consists of classes such as File, InputStream, Reader, and Writer

Besides these, many packages are provided in Java

Page 11 Now

let's learn about access modifiers

Instance variables, methods, classes, etc. with the public

modifier can be accessed from anywhere

other than the same package

If they are protected,

they can be accessed from within the same package

or from child classes

We will look at child classes

in more detail in the inheritance chapter

If private is attached,

access is only possible within the same class

If default or package is attached

(or nothing is attached),

access is possible within the same package (folder)

The Venn diagram shows the inclusion

relationships of access modifiers

Private access has the narrowest access scope, and default,

protected, and public access

have wider access scopes in that order

As an example of using the access modifier on page 12,

let's look at an example

that uses a class with default,

that is, package access

First, the com.company1 package

contains four classes:

MyClass, NotPublicClass, Product, and PublicClass

Among these, NotPublicClass does not have an access modifier,

so it is the default, i.e. package access

PublicClass has a public access modifier in front of it,

so it becomes a public class

Now we have imported all the classes from com.company1 into the Product class

in the com.company2 package

And I tried to create

objects of NotPublicClass and PublicClass

At this time, NotPublicClass is not a public class,

so it cannot be accessed outside of its own package

Therefore, a compile error occurs

However, in the case of PublicClass,

since it is a public class, it can be freely accessed from other packages

Page 13 Among the instance

variables of AClass, x is public, y is private,

and z is package access

In the default constructor, the values of x, y, and z

are assigned to 2, 3, and 4, respectively

Below that, there are three methods in total: publicMethod()

with public access, privateMethod()

with private access, and packageMethod()

with package access

Page 14

Now, in the main method of AClassTest,

we create an object of AClass called ac

At this time, the default constructor is executed,

so ac's x, y, and z have the initial values of 2, 3, and 4, respectively

ac.x is printed normally, but when I try to print ac.y,

a compile error occurs

This is because ac.y is a private instance

variable in AClass

That is, y can only be used within AClass

Since ac.z has package permissions, it can be freely accessed by the AClassTest class

within the same folder (package)

Also, the public method ac.publicMethod()

and the package method

ac.packageMethod() can be called freely

However, since the private method

ac.privateMethod() can only be used within the same class,

a compile error will occur if called externally

In terms of the concept

of information hiding,

it is recommended to declare all members

within a class as private

This serves to prevent incorrect use of members

outside of the class

Instead, you should create separate public methods

that can read or change

the values of private members

Page 16 An accessor, also called a getter,

is a public method

used to read the value of a private

variable of a class from outside

the class

For example, the accessor for private

int x; would be public int getX()

and the accessor for private

String str; would be public String getStr()

What this accessor method does

is really simple: it simply returns the value of the private variable

Meanwhile, Mutator, also called Setter,

is a public method that writes a value to a private variable

For example, void setX(int); void setStr(String); etc

are possible

The role of a mutator is also very simple: to assign

a given parameter value to a private instance variable

However, you can first test

whether the parameter's value

is invalid data and then assign it to a private variable

For example, the 'month' in a date may be filtered out in the test

because it is not valid unless it is an integer between 1 and 12

Page 17

Now let's look at some practical

examples of using accessors and mutators

int x and String str in Bclass

are both private instance variables

The initial values of x and str are

assigned in the constructor

public int getX() and public String

getStr() are accessor methods

What accessors do is read the value of an instance

variable and return it

Page 18 Mutators

setX and setStr

are public methods

that assign new values to x and str

In particular, in setStr,

instead of assigning the given

parameter String

as is, a new String object is created and assigned

This will prevent privacy leaks

We will learn more about privacy leaks

in 05_3 Copy Constructor

Page 19

At first, in the default constructor,

I initialized x and str to 3

and “Korea” and read them with accessors and printed them

I changed the x and str values to 5 and “Seoul” using a mutator,

then read them again using an accessor and printed them