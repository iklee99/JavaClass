In this lecture, we will learn about arrays

Page 2 An array is a data structure

that contains data elements of the same type,

occupying a continuous space in memory,

and each element can be accessed using an index

As you can see in the picture, the scores array contains 30 integers,

and each element can be accessed using an index from 0 to 29

When reading each element on the right or writing a value to an element,

you can refer to individual elements

by putting the index in brackets [ ]

There are two main ways to declare an array on page 3

There are two ways: the first is to use the Type followed by an empty bracket,

and then the array variable, and the second is to use the Type followed by the variable name, and then an empty bracket

It doesn't matter which one you use,

but the first method is more commonly used

Another thing to note is that in this state,

the memory for each element has not been allocated yet

There is a way to declare an Array

and initialize its data at the same time

Write an equal sign after the variable in declaration, open a brace {, list the elements

one by one, and then close the brace }

You can initialize String, int, double array, etc. in this way

Alternatively, you can use the new operator

to explicitly allocate memory

Looking at example 1, 5 int type memories are allocated to the a1 array,

and the values of the array can be initialized in the form of a1[0], a1[3]

In example 2, references to three Strings are initialized in str,

so str[0] can have references to Strings such as “Seoul”,

str[1] can have references to Strings such as “Tokyo”, etc

Page 5

Each array element is initialized to the default initialization value

even if it is not initialized separately

For example, when an int a[3] array with a size of 3 is captured in memory,

the values of a[0], a[1], and a[2] are all initialized to 0

If we look at the default

initialization values by type, the initial values of integers such as byte,

short, and int, and float and double are all 0 (or 0.0)

The char type becomes the null character

Boolean becomes false, and reference types including String

are automatically initialized to null

Page 6

An array has a length field, which contains the size value of the array

This value is read only

Obviously, the value of length cannot be changed

The length of an int array initialized to {10, 20, 30} is 3

String has a length() method that returns its size

However, in the case of arrays, length is a variable, not a method

Page 7

There is an array parameter in the header of the main method

that we have been using without much thought

args is an array of Strings containing the command line

arguments that follow the program name

For example, args[0] is the argument immediately following the program

name, args[1] is the argument following it

For example, when you run the command ‘ls -l’ in the terminal,

ls is the program name and -l is args[0]

Page 8

However, if you try to use args[0], args[1]

without providing command line arguments,

the program will stop with an error

called “ArrayIndexOutOfBoundsException”

Page 9 To use command

line arguments in IntelliJ IDEA,

click the three-dot menu button next to the play

button and select “run with parameters”

In the menu that appears here,

enter command line arguments in the blank spaces

In this example, ‘Seoul’ and “Korea’

are given as args[0] and args[1] respectively

And press the ‘run’ button

Page 10 This will allow you to input args[0] and args[1]

as if you were typing them in the terminal

Page 11

This slide shows an example of defining a multidimensional array

array1 is a 2 x 3 multidimensional array with 2 rows and 3 columns

A nested for loop is used to fill in the element

values of the array

Each element array1[i][j] is filled with i + j

If you look at the picture,

the array1 reference variable points to the reference array1[0] of the first row

array1[0] and array1[1] are references representing the first dimension,

and you should note that they exist in a continuous memory space

array1[0] points to array1[0][0], and from here,

three elements belonging to the same row are continuous

Also, the three elements pointed to by array2[1], array2[1][0],

array2[1][1], and array2[1][2]

are also in contiguous memory space

However, array1[0][2] and array1[1][0] do

not necessarily have to be located in contiguous space

Page 12 array2 has 3 rows,

but each row has a different

number of columns

In Java, multidimensional arrays of this kind with missing teeth are also possible

To consider an array of class objects,

we first define a simple Data class

with one instance

variable called int x 

When creating an array of this Data class, first

create an array that will contain references to the Data objects

After that, iterate through the elements of the reference array

one by one and create Data objects individually

In the case of an array that has class objects as elements,

these two steps are required

Page 14 An enumeration

type is a type that can have

one of the values of an enumeration constant

First, an enumeration type called Day

is defined, and constants representing each day of the week

from SUNDAY to SATURDAY are defined in this type

In the program, the today

variable is declared as an enumeration of Day type

and is initialized as Day.WEDNESDAY

When the today variable is printed, WEDNESDAY is printed

In the switch statement below, if today is SATURDAY or SUNDAY,

it prints weekend, and if it is any day

other than Saturday or Sunday, it prints weekday

Page 15 This is the code to print all the days of the week

The day.name() method of the enumeration type

day returns

the enumeration constant as a String

day.ordinal() returns the element starting from 0

If you try to print day itself,

it will be converted to a String and printed, just like day.name()

The valueOf method returns an enumeration value

with the given String as its name