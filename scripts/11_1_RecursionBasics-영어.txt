I will give you the first note of Recursion
Page 2
First, let's learn about recursive methods, which do not have a return value
The definition of a recursive method
is a method that contains a call to itself
In solving a problem, a large task is divided into subtasks and solved
Usually, the size of the subtask problem
is smaller than that of the original task
Let's look at an example
called Page 3 Vertical Numbers
In main, the method writeVertical is called three times with different parameters:
3, 12, and 123
If we look at just the method
call and output to see what the task is, 3 is output by the call writeVertical(3)
The reason the input is output
as is is because 3 is a single-digit number less than 10
Next, if you call writeVertical(12), 1 and 2
will be printed vertically in order
Next, if you call writeVertical(123), 1
2 3 will be printed vertically
writeVertical(int n) is implemented as a recursive method
First, if n is a single-digit number, it will be printed out as is
In case of a number larger than one digit, we made the parameter n a quotient divided by 10,
recursively called writeVertical(n / 10),
and printed the remainder after dividing n by 10
Page 4
When you want to implement a method using recursion,
two subtasks must be included
First, the first subtask is a recursive case
that creates a smaller version of the original task
and implements it with a recursive call
For example, in our writeVertical method,
the recursive subtask is to call writeVertical
with the quotient of n divided by 10 as a parameter in the else part
The second subtask is the stopping case, also called the simple case
Since the task is simple, it is a case that can be easily solved
without dividing it into any more subtasks
In our writeVertical method, if n is less than 10, that is, a single-digit number,
this is the stopping case,
and we can simply print n without any further recursive calls
Page 5 Let's trace the recursive call in more detail
When writeVertical(123) is called,
it calls writeVertical(12) again with 12,
which is the quotient divided by 10,
and then calls writeVertical(1) with 1, which is the quotient divided by 10
At this time, the stopping case is reached, 1 is output,
and then writeVertical(1) is finished
Immediately after executing writeVertical(1), the remainder of 12
divided by 10,
2, is printed, and then writeVertical(12) is finished and returned
After that, the remainder 3, which is the result of dividing 123 by 10, is printed
Tracing it step by step in
this order will help you understand the execution of the recursive method
Page 6
This time, I modified writeVertical
so that it does not handle the stopping case
The modified method is the newWriteVertical method,
which recursively calls the quotient of n divided by 10 given as a parameter,
and prints the remainder when n is divided by 10
Therefore, this newWriteVertical method
does not have a stopping case
Let's look at the order in which newWriteVertical(123) is executed
It calls newWriteVertical(12) with 12, which is the quotient of 1 123
divided by 10, as a parameter
Inside it, newWriteVertical(1) is called with 1,
which is the quotient of 12
divided by 10, as a parameter
Since there is no stopping case, newWriteVertical(0) is called with 0,
which is the quotient of 1 divided by 10, as a parameter
Since the quotient of 0
divided by 10 is 0, newWriteVertical(0) is called again inside it,
and eventually this call continues infinitely
The reason why this infinite recursion is repeated
is because the stopping case does not exist
Page 7 Almost
all computer systems
use a stack to implement recursion
A stack is a special data structure
similar to a stack of paper
The new paper will always be placed on top of the stack
To remove a piece of paper from a Stack,
you must remove the one on top
In other words, it is a Last In First Out (LIFO) structure,
where the item that comes in the latest is the one that goes out the fastest
Page 8 Activation Record (AR) is created one by one
when a method is called
and contains information necessary for the method to be executed,
such as parameters passed to the method and values of local variables
AR is destroyed the moment the method returns
In the recursive call of the writeVertical method,
ARs are managed in a stack structure
Here, writeVertical is abbreviated as wv
First, when wv(123) is called, an AR is created on the empty stack
At this time, the value of parameter n in AR is 123
wv(12) is called with a recursive call
Again, wv(1) is called with a recursive call
Since n is a single-digit number,
print(1) is executed and wv(1) ends, so the AR on the top of the stack is destroyed
print(2) is done inside wv(12) and wv(12) ends
Finally, print(3) is performed in wv(123) and AR is destroyed
Page 9 Let's compare Recursion
and Iteration
In fact, recursion is not always necessary
This means that any task that can be solved using recursion can also be solved
in a non-recursive way
This non-recursive version of the method uses iteration
The recursive version is simple to look at
and easy to understand,
but it runs slower than the iterative version
As we saw in the previous slide,
it takes time to create and destroy AR because activation records must be created
one by one each time a method is called
Additionally, the recursive version will require more storage
space for AR
In the case of the recursive version, if it accidentally gets stuck in an infinite loop,
it can consume all the system's memory and cause an error
Page 10
This code is an iterative
version of the writeVertical method
Here we assume writeVertical(2345) is called
First, initialize the value of nsTens to 1 and left to 2345
Repeat the while loop while left is greater than 9
At each iteration, left is divided by 10 and nsTens is multiplied by 10
In the first loop, left is 234,
nsTens is 10, then left is 23, nsTens is 100,
and in the next loop, left is 2, nsTens is 1000
Now we exit the while loop because left is 2 which is less than 9
The current value of nsTens is 1000,
which is a power of 10 with the same number of digits as n
In our case, n is 2345, so nsTens becomes 1000
Now in the for loop, pt is initialized to the nsTens value of 1000, and on each iteration,
pt is divided by 10 and replaced with the quotient
The for loop only iterates until pt is greater than 0
In the body of the for loop, print the quotient of n divided by pt